---
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: argocd-web-app-set
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "2"
    pref.argocd.argoproj.io/default-view: "network"
    pref.argocd.argoproj.io/default-pod-sort: "topLevelResource"
spec:
  goTemplate: true
  # generator allows us to source specific values from an external k8s secret
  generators:
    - plugin:
        configMapRef:
          name: secret-var-plugin-generator
        input:
          parameters:
            secret_vars:
              # - cluster_issuer
              - argo_cd_hostname
              - argo_cd_oidc_provider
              - argo_cd_oidc_issuer
              - argo_cd_oidc_client_id
              - argo_cd_oidc_logout_url
              - global_cluster_issuer
  template:
    metadata:
      name: argocd-helm
    spec:
      project: argo-cd
      destination:
        server: https://kubernetes.default.svc
        namespace: argocd
      syncPolicy:
        syncOptions:
          - ApplyOutOfSyncOnly=true
          - Retry=true
        automated:
          prune: true
          selfHeal: true
      source:
        repoURL: https://argoproj.github.io/argo-helm
        chart: argo-cd
        targetRevision: 7.8.5
        helm:
          releaseName: argo-cd
          valuesObject:
            fullnameOverride: argo-cd
            # -- Create aggregated roles that extend existing cluster roles to interact with argo-cd resources
            ## Ref: https://kubernetes.io/docs/reference/access-authn-authz/rbac/#aggregated-clusterroles
            createAggregateRoles: false

            ## Globally shared configuration
            global:
              # -- Common labels for the all resources
              additionalLabels:
                argocd.argoproj.io/instance: argocd-helm

              # Default logging options used by all components
              logging:
                # -- Set the global logging format. Either: `text` or `json`
                format: json
                level: debug

              # Default network policy rules used by all components
              networkPolicy:
                # -- Create NetworkPolicy objects for all components
                create: true
                # -- Default deny all ingress traffic
                defaultDenyIngress: false

              # Default affinity preset for all components
              affinity:
                # -- Default pod anti-affinity rules. Either: `none`, `soft` or `hard`
                podAntiAffinity: soft
                # Node affinity rules
                nodeAffinity:
                  # -- Default node affinity rules. Either: `none`, `soft` or `hard`
                  type: hard

              # -- Default [TopologySpreadConstraints] rules for all components
              ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
              ## If labelSelector is left out, it will default to the labelSelector of the component
              topologySpreadConstraints: []
                # - maxSkew: 1
                #   topologyKey: topology.kubernetes.io/zone
                #   whenUnsatisfiable: DoNotSchedule

            ## Argo Configs
            configs:
              # General Argo CD configuration
              ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml
              cm:
                # -- Create the argocd-cm configmap for [declarative setup]
                create: true

                # -- Argo CD's externally facing base URL (optional). Required when configuring SSO
                url: "https://{{ .argo_cd_hostname }}"

                # -- The name of tracking label used by Argo CD for resource pruning
                # @default -- Defaults to app.kubernetes.io/instance
                application.instanceLabelKey: argocd.argoproj.io/instance

                # -- Enable logs RBAC enforcement
                # argo-cd.readthedocs.io/en/latest/operator-manual/upgrading/2.3-2.4/#enable-logs-rbac-enforcement
                server.rbac.log.enforce.enable: false

                # -- Enable exec feature in Argo UI
                ## Ref: https://argo-cd.readthedocs.io/en/latest/operator-manual/rbac/#exec-resource
                exec.enabled: false

                # -- Enable local admin user
                ## Ref: https://argo-cd.readthedocs.io/en/latest/faq/#how-to-disable-admin-user
                admin.enabled: true

                # -- Timeout to discover if a new manifests version got published to the repository
                timeout.reconciliation: 180s

                # -- Timeout to refresh application data as well as target manifests cache
                timeout.hard.reconciliation: 0s

                # OIDC configuration as an alternative to dex (optional).
                # to source a secret from somewhere else:
                # https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#example_1
                # this is needed for keycloack under oidc.config
                # requestedIDTokenClaims: {"groups": {"essential": true}}
                oidc.config: |
                  name: "{{ .argo_cd_oidc_provider }}"
                  issuer: "{{ .argo_cd_oidc_issuer }}"
                  clientID: "{{ .argo_cd_oidc_client_id }}"
                  clientSecret: $argocd-oidc-credentials:oidc.clientSecret
                  requestedScopes:
                    - openid
                    - profile
                    - email
                    - groups
                  requestedIDTokenClaims: {"groups": {"essential": true}}
                  logoutURL: "{{ .argo_cd_oidc_logout_url }}"

                # this is temporary during testing
                # ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#skipping-certificate-verification-on-oidc-provider-connections
                oidc.tls.insecure.skip.verify: true

              # Argo CD configuration parameters
              ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cmd-params-cm.yaml
              params:
                # -- Create the argocd-cmd-params-cm configmap
                create: true
                ## Server properties -- Run server without TLS
                server.insecure: false
                ## Repo-server properties -- Limit on number of concurrent
                #  manifests generate requests. 0 means no limit.
                reposerver.parallelism.limit: 0
                ## ApplicationSet Properties
                # -- Modify how application is synced b/w the generator and cluster
                # One of: `sync`, `create-only`, `create-update`, `create-delete`
                applicationsetcontroller.policy: sync
                # -- Enables use of the Progressive Syncs capability
                applicationsetcontroller.enable.progressive.syncs: false


              # Argo CD RBAC policy configuration
              ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md
              rbac:
                # -- Create the argocd-rbac-cm configmap with ([Argo CD RBAC policy]) definitions.
                # If false, it is expected the configmap will be created by something else.
                # Argo CD will not work if there is no configmap created with the name above.
                create: true

                # -- The name of the default role which Argo CD will falls back to, when authorizing API requests (optional).
                # If omitted/empty, users may be still be able to login, but won't see apps, projects, etc...
                policy.default: ''

                # -- File containing user-defined policies and role definitions.
                # Policy rules are in the form:
                #  p, subject, resource, action, object, effect
                # Role definitions and bindings are in the form:
                #  g, subject, inherited-subject
                # policy.csv |
                #   p, role:org-admin, applications, *, */*, allow
                #   p, role:org-admin, clusters, get, *, allow
                #   p, role:org-admin, repositories, *, *, allow
                #   p, role:org-admin, logs, get, *, allow
                #   p, role:org-admin, exec, create, */*, allow
                policy.csv: |
                  g, argocd_administrators, role:admin
                  g, argocd_users, role:readonly

                # -- OIDC scopes to examine during rbac enforcement (in addition to `sub` scope).
                # The scope value can be a string, or a list of strings.
                scopes: "[groups]"

              # GnuPG public keys for commit verification
              ## Ref: https://argo-cd.readthedocs.io/en/stable/user-guide/gpg-verification/
              gpg:
                # -- Annotations to be added to argocd-gpg-keys-cm configmap
                annotations: {}

                # -- [GnuPG] public keys to add to the keyring
                # @default -- `{}` (See [values.yaml])
                ## Note: Public keys should be exported with `gpg --export --armor <KEY>`
                keys: {}
                  # 4AEE18F83AFDEB23: |
                  #   -----BEGIN PGP PUBLIC KEY BLOCK-----
                  #   ...
                  #   -----END PGP PUBLIC KEY BLOCK-----

              # SSH known hosts for Git repositories
              ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#ssh-known-host-public-keys
              ssh:
                # -- Annotations to be added to argocd-ssh-known-hosts-cm configmap
                annotations: {}

                # -- Known hosts to be added to the known host list by default.
                # @default -- See [values.yaml]
                knownHosts: |
                  [ssh.github.com]:443 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=
                  [ssh.github.com]:443 ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl
                  [ssh.github.com]:443 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=
                  github.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=
                  github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl
                  github.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=
                  gitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=
                  gitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf
                  gitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9


              # -- Repositories list to be used by applications
              ## Creates a secret for each key/value specified below to create repositories
              ## Note: the last example in the list would use a repository credential template, configured under "configs.repositoryCredentials".
              repositories:
                small-hack-argocd:
                  url: https://github.com/small-hack/argocd-apps.git
                  name: small-hack
                  type: git

              # Argo CD sensitive data
              # Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#sensitive-data-and-sso-client-secrets
              secret:
                # -- Create the argocd-secret
                createSecret: true

                # -- add additional secrets to be added to argocd-secret
                ## Custom secrets. Useful for injecting SSO secrets into environment variables.
                ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#sensitive-data-and-sso-client-secrets
                ## Note that all values must be non-empty.
                extra: {}
                # LDAP_PASSWORD: "mypassword"

              # -- Define custom [CSS styles] for your argo instance.
              # setting will automatically mount the provided CSS and reference it in the argo configuration.
              ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/custom-styles/
              # adding spacechalk-like colors :)
              styles: |
               .sidebar {
                 background: linear-gradient(to bottom, #414868, #232336);
                 color: #c0caf5;
                 box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
               }
               .input-container .input {
                  background-color: #1a1b1c !important;
                  color: #fff;
               }
               .theme-dark .cd-layout {
                 background-color: #2a2933;
                 color: #c0caf5;
               }
               .applications-tiles .argo-table-list__row {
                 background-color: #414868;
                 color: #c0caf5;
                 box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
               }
               .applications-list__title {
                 color: #eae9ff;
               }
               .applications-list__entry--health-Healthy {
                 border-left-color: #6bd939 !important;
               }
               .status-bar__segment {
                 background-color: #6bd939 !important;
               }
               img.sidebar__logo__character {
                  width: 60px !important;
                  content: url("https://user-images.githubusercontent.com/2389292/264784405-1e7e5902-d48f-440d-98f4-44028f4bd90e.png") !important;
               }
               .status-bar {
                 border: 2px solid #434557;
               }
               .theme-dark .top-bar {
                 background-color: #414568ba;
                 color: #c0caf5;
                 border-bottom: 1px solid #394055;
               }
               .theme-dark .top-bar__title {
                 color: #6da3c4;
               }
               .argo-button--base {
                 color: #1e374f;
                 background-color: #6eb3ec;
                 margin: 4px;
               }
               .argo-button--base.disabled, .argo-button--base[disabled] {
                  color: #3a454d;
                  background-color: #82a0b5;
               }
               .filter__header .argo-button {
                  background: #6eb3ec;
               }
               .a {
                 color: #43d3ff !important;
               }
               .applications-list__view-type i.selected {
                 color: #557fc1;
               }
               .theme-dark .application-resource-tree__node {
                 background-color: #4e5e84;
                 color: #d2c4c4;
                 box-shadow: 1px 1px 1px #7bc0f0;
               }
               .theme-dark .application-resource-tree__node {
                 color: #dbeffd;
               }
               .application-resource-tree__node-kind-icon--big {
                  background: #506297;
                  border: 4px solid #91b1db;
               }
               .application-resource-tree__node-kind-icon {
                  color: #bdc8d0;
               }
               .application-resource-tree__node-kind {
                  color: #dbeffd;
               }
               .application-resource-tree__node .application-resource-tree__node--application {
                  width: 290px important!;
                  height: 57px important!;
               }
               i.fa-heart {
                  color: #6bd939 !important;
               }
               i.fa-check-circle {
                  color: #6bd939 !important;
               }
               i.fa-star {
                  color: #fffc44 !important;
               }
               i.fa-heart-broken {
                  color: rgb(255, 119, 221) !important;
               }
               i.fa-ghost {
                  color: #fdcd36 !important;
               }
               i.fa-pause-circle {
                  color: #fffc44 !important;
               }
               i.fa-arrow-alt-circle-up {
                  color: #fffc44 !important;
               }
               i.fa-external-link-alt {
                  color: #5bc2ff;
               }
               .sidebar__nav-item--active i {
                  color: #9cd1ff;
               }
               .application-status-panel__item-value--Succeeded a {
                  color: #6bd939 !important;
               }
               .application-details .graph-options-panel {
                  background-color: #435173;
               }
               .application-details .graph-options-panel a {
                  color: #b9e2fd;
               }
               .application-details .graph-options-panel .zoom-value {
                  background-color: #a0d0ee;
                  color: #495763;
               }
               .theme-dark .application-status-panel {
                  background-color: #404767;
                  color: #dee6eb;
                  box-shadow: rgba(0, 0, 0, 0.45) 0px 25px 20px -20px;
               }
               .application-details__resource-icon {
                  color: #cce0f0;
               }
               .theme-dark .argo-table-list__row {
                  background: #4e5e84;
                  color: #dee6eb;
                  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
               }
               .theme-dark .white-box {
                  background-color: #4e5e84;
                  color: #eff3f5;
               }
               .theme-dark .settings-overview__redirect-panel {
                  background-color: #404767;
                  color: #fff;
                  box-shadow: rgba(0, 0, 0, 0.45) 0px 25px 20px -20px;
               }
               .settings-overview__redirect-panel__title {
                  color: #54cfff;
               }
               a {
                  color: #59efff;
               }
               .monaco-editor .margin {
                  background-color: #232336 !important;
               }
               .monaco-editor, .monaco-editor-background, .monaco-editor .inputarea.ime-input {
                  background-color: #232336 !important;
               }
               .row.popup-container__header.popup-container__header__normal {
                    background-color: #404767 !important;
               }
               .row.popup-container__body {
                  background-color: #4e5e84 !important;
               }
               .row.popup-container__footer {
                    background-color: #4e5e84 !important;
               }
               .button.argo-button--base-o:nth-child(1) {
                    background-color: #ffffff;
               }

            ## Application controller
            controller:
              ## Application controller metrics configuration
              metrics:
                # -- Deploy metrics service
                enabled: false
                applicationLabels:
                  # -- Enables additional labels in argocd_app_labels metric
                  enabled: false
                  # -- Additional labels
                  labels: []
                service:
                  # -- Metrics service type
                  type: ClusterIP
                  # -- Metrics service clusterIP. `None` makes a "headless service" (no virtual IP)
                  clusterIP: ""
                  # -- Metrics service annotations
                  annotations: {}
                  # -- Metrics service labels
                  labels: {}
                  # -- Metrics service port
                  servicePort: 8082
                  # -- Metrics service port name
                  portName: http-metrics
                serviceMonitor:
                  # -- Enable a prometheus ServiceMonitor
                  enabled: false
                  # -- Prometheus ServiceMonitor interval
                  interval: 30s
                  # -- Prometheus [RelabelConfigs] to apply to samples before scraping
                  relabelings: []
                  # -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion
                  metricRelabelings: []
                  # -- Prometheus ServiceMonitor selector
                  selector: {}
                    # prometheus: kube-prometheus

                  # -- Prometheus ServiceMonitor scheme
                  scheme: ""
                  # -- Prometheus ServiceMonitor tlsConfig
                  tlsConfig: {}
                  # -- Prometheus ServiceMonitor namespace
                  namespace: "" # "monitoring"
                  # -- Prometheus ServiceMonitor labels
                  additionalLabels: {}
                  # -- Prometheus ServiceMonitor annotations
                  annotations: {}

              ## Enable this and set the rules: to whatever custom rules you want for the Cluster Role resource.
              ## Defaults to off
              clusterRoleRules:
                enabled: false
                # -- List of custom rules for the application controller's ClusterRole resource
                rules: []

            ## Dex
            dex:
              enabled: false

            ## Redis
            redis:
              # -- Enable redis
              enabled: true
              serviceAccount:
                # -- Create a service account for the redis pod
                create: false
                # -- Automount API credentials for the Service Account
                automountServiceAccountToken: false
              metrics:
                # -- Deploy redis metrics service
                enabled: false
                # Redis metrics service configuration
                service:
                  # -- Metrics service port
                  servicePort: 9121
                  # -- Metrics service port name
                  portName: http-metrics
                serviceMonitor:
                  # -- Enable a prometheus ServiceMonitor
                  enabled: false

            ## Server
            server:
              ## Argo CD server Horizontal Pod Autoscaler
              autoscaling:
                # -- Enable Horizontal Pod Autoscaler ([HPA]) for the Argo CD server
                enabled: false
                # -- Minimum number of replicas for the Argo CD server [HPA]
                minReplicas: 1
                # -- Maximum number of replicas for the Argo CD server [HPA]
                maxReplicas: 5
                # -- Average CPU utilization percentage for the Argo CD server [HPA]
                targetCPUUtilizationPercentage: 50
                # -- Average memory utilization percentage for the Argo CD server [HPA]
                targetMemoryUtilizationPercentage: 50
                # -- Configures the scaling behavior of the target in both Up and Down directions.
                # This is only available on HPA apiVersion `autoscaling/v2beta2` and newer
                behavior: {}
                  # scaleDown:
                  #  stabilizationWindowSeconds: 300
                  #  policies:
                  #   - type: Pods
                  #     value: 1
                  #     periodSeconds: 180
                  # scaleUp:
                  #   stabilizationWindowSeconds: 300
                  #   policies:
                  #   - type: Pods
                  #     value: 2
                  #     periodSeconds: 60

              ## Argo CD server Pod Disruption Budget
              ## Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
              pdb:
                # -- Deploy a [PodDisruptionBudget] for the Argo CD server
                enabled: false
                # -- Labels to be added to Argo CD server pdb
                labels: {}
                # -- Annotations to be added to Argo CD server pdb
                annotations: {}
                # -- Number of pods that are available after eviction as number or percentage (eg.: 50%)
                # @default -- `""` (defaults to 0 if not specified)
                minAvailable: ""
                # -- Number of pods that are unavailable after eviction as number or percentage (eg.: 50%).
                ## Has higher precedence over `server.pdb.minAvailable`
                maxUnavailable: ""

              ## Argo UI extensions
              ## This function in tech preview stage, do expect instability or breaking changes in newer versions.
              ## Ref: https://github.com/argoproj-labs/argocd-extensions
              extensions:
                # -- Enable support for Argo UI extensions
                enabled: false

              # -- Resource limits and requests for the Argo CD server
              resources: {}
              #  limits:
              #    cpu: 100m
              #    memory: 128Mi
              #  requests:
              #    cpu: 50m
              #    memory: 64Mi

              # Server container ports
              containerPorts:
                # -- Server container port
                server: 8080
                # -- Metrics container port
                metrics: 8083

              ## Server metrics service configuration
              metrics:
                # -- Deploy metrics service
                enabled: true
                service:
                  # -- Metrics service type
                  type: ClusterIP
                  # -- Metrics service port
                  servicePort: 8083
                  # -- Metrics service port name
                  portName: http-metrics
                serviceMonitor:
                  # -- Enable a prometheus ServiceMonitor
                  enabled: true
                  # -- Prometheus ServiceMonitor tlsConfig
                  tlsConfig: {}
                  # -- Prometheus ServiceMonitor namespace
                  namespace: "prometheus"

              ingress:
                # Enable an ingress resource for the Argo CD server
                enabled: true
                ingressClassName: "nginx"
                annotations:
                  cert-manager.io/cluster-issuer: '{{ .global_cluster_issuer }}'
                  kubernetes.io/tls-acme: true
                  nginx.ingress.kubernetes.io/backend-protocol: HTTPS
                  nginx.ingress.kubernetes.io/ssl-passthrough: true
                hostname: '{{ .argo_cd_hostname }}'
                tls:
                  - secretName: argocd-secret
                    hosts:
                      - '{{ .argo_cd_hostname }}'
                # Uses `server.service.servicePortHttps` instead `server.service.servicePortHttp`
                https: true

              # dedicated ingress for gRPC as documented at
              # Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/
              ingressGrpc:
                # -- Enable an ingress resource for the Argo CD server for dedicated [gRPC-ingress]
                enabled: false
                # -- Additional ingress annotations for dedicated [gRPC-ingress]
                annotations:
                  cert-manager.io/cluster-issuer: '{{ .global_cluster_issuer }}'
                # -- Defines which ingress controller will implement the resource [gRPC-ingress]
                ingressClassName: "nginx"
                # -- List of ingress hosts for dedicated [gRPC-ingress]
                ## Hostnames must be provided if Ingress is enabled.
                ## Secrets must be manually created in the namespace
                hosts:
                  - '{{ .argo_cd_hostname }}'
                # -- List of ingress paths for dedicated [gRPC-ingress]
                paths:
                  - /
                # -- Ingress path type for dedicated [gRPC-ingress]. One of `Exact`, `Prefix` or `ImplementationSpecific`
                pathType: Prefix
                # -- Ingress TLS configuration for dedicated [gRPC-ingress]
                tls:
                  - secretName: argocd-grpc-secret
                    hosts:
                      - 'grpc-{{ .argo_cd_hostname }}'
                # -- Uses `server.service.servicePortHttps` instead `server.service.servicePortHttp`
                https: true

            ## Repo Server
            repoServer:
              # -- Repo server name
              name: repo-server

              # this is an init container for configmap volumes
              # https://argocd-vault-plugin.readthedocs.io/en/stable/installation/#initcontainer-and-configuration-via-sidecar
              volumes:
                - name: cmp-plugin
                  configMap:
                    name: cmp-plugin
                - name: custom-tools
                  emptyDir: {}

              # for argocd vault plugin to download argocd-vault-plugin
              # https://argocd-vault-plugin.readthedocs.io/en/stable/installation/#initcontainer-and-configuration-via-sidecar
              initContainers:
                - name: download-tools
                  image: registry.access.redhat.com/ubi8
                  env:
                    - name: AVP_VERSION
                      value: 1.16.1
                  command: [sh, -c]
                  args:
                    - >-
                      curl -L https://github.com/argoproj-labs/argocd-vault-plugin/releases/download/v$(AVP_VERSION)/argocd-vault-plugin_$(AVP_VERSION)_linux_amd64 -o argocd-vault-plugin &&
                      chmod +x argocd-vault-plugin &&
                      mv argocd-vault-plugin /custom-tools/
                  volumeMounts:
                    - mountPath: /custom-tools
                      name: custom-tools

              # this is a side car for the argocd vault plugin
              # https://argocd-vault-plugin.readthedocs.io/en/stable/installation/#initcontainer-and-configuration-via-sidecar
              extraContainers:
                - name: avp
                  command: [/var/run/argocd/argocd-cmp-server]
                  image: registry.access.redhat.com/ubi8
                  securityContext:
                    runAsNonRoot: true
                    runAsUser: 999
                  volumeMounts:
                    - mountPath: /var/run/argocd
                      name: var-files
                    - mountPath: /home/argocd/cmp-server/plugins
                      name: plugins
                    - mountPath: /tmp
                      name: tmp

                    # Register plugins into sidecar
                    - mountPath: /home/argocd/cmp-server/config/plugin.yaml
                      subPath: avp.yaml
                      name: cmp-plugin

                    # Important: Mount tools into $PATH
                    - name: custom-tools
                      subPath: argocd-vault-plugin
                      mountPath: /usr/local/bin/argocd-vault-plugin

                - name: avp-helm
                  command: [/var/run/argocd/argocd-cmp-server]
                  image: alpine/helm:3.12.3
                  securityContext:
                    runAsNonRoot: true
                    runAsUser: 999
                  volumeMounts:
                    - mountPath: /var/run/argocd
                      name: var-files
                    - mountPath: /home/argocd/cmp-server/plugins
                      name: plugins
                    - mountPath: /tmp
                      name: tmp

                    # Register plugins into sidecar
                    - mountPath: /home/argocd/cmp-server/config/plugin.yaml
                      subPath: avp-helm.yaml
                      name: cmp-plugin

                    # Important: Mount tools into $PATH
                    - name: custom-tools
                      subPath: argocd-vault-plugin
                      mountPath: /usr/local/bin/argocd-vault-plugin

              ## Repo server Horizontal Pod Autoscaler
              autoscaling:
                # -- Enable Horizontal Pod Autoscaler ([HPA]) for the repo server
                enabled: false
                # -- Minimum number of replicas for the repo server [HPA]
                minReplicas: 1
                # -- Maximum number of replicas for the repo server [HPA]
                maxReplicas: 5
                # -- Average CPU utilization percentage for the repo server [HPA]
                targetCPUUtilizationPercentage: 50
                # -- Average memory utilization percentage for the repo server [HPA]
                targetMemoryUtilizationPercentage: 50
                # -- Configures the scaling behavior of the target in both Up and Down directions.
                # This is only available on HPA apiVersion `autoscaling/v2beta2` and newer
                behavior: {}
                  # scaleDown:
                  #  stabilizationWindowSeconds: 300
                  #  policies:
                  #   - type: Pods
                  #     value: 1
                  #     periodSeconds: 180
                  # scaleUp:
                  #   stabilizationWindowSeconds: 300
                  #   policies:
                  #   - type: Pods
                  #     value: 2
                  #     periodSeconds: 60

              # -- Resource limits and requests for the repo server pods
              resources: {}
              #  limits:
              #    cpu: 50m
              #    memory: 128Mi
              #  requests:
              #    cpu: 10m
              #    memory: 64Mi

              # TLS certificate configuration via Secret
              ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/tls/#configuring-tls-to-argocd-repo-server
              ## Note: Issuing certificates via cert-manager in not supported right now because it's not possible to restart repo server automatically without extra controllers.
              certificateSecret:
                # -- Create argocd-repo-server-tls secret
                enabled: false
                # -- Annotations to be added to argocd-repo-server-tls secret
                annotations: {}
                # -- Labels to be added to argocd-repo-server-tls secret
                labels: {}
                # -- Certificate authority. Required for self-signed certificates.
                ca: ''
                # -- Certificate private key
                key: ''
                # -- Certificate data. Must contain SANs of Repo service (ie: argocd-repo-server, argocd-repo-server.argo-cd.svc)
                crt: ''

              ## Repo server metrics service configuration
              metrics:
                # -- Deploy metrics service
                enabled: true
                service:
                  # -- Metrics service type
                  type: ClusterIP
                  # -- Metrics service port
                  servicePort: 8084
                  # -- Metrics service port name
                  portName: http-metrics
                serviceMonitor:
                  # -- Enable a prometheus ServiceMonitor
                  enabled: false
                  # -- Prometheus ServiceMonitor tlsConfig
                  tlsConfig: {}
                  # -- Prometheus ServiceMonitor namespace
                  namespace: "" # "monitoring"

              ## Enable Custom Rules for the Repo server's Cluster Role resource
              ## Enable this and set the rules: to whatever custom rules you want for the Cluster Role resource.
              ## Defaults to off
              clusterRoleRules:
                # -- Enable custom rules for the Repo server's Cluster Role resource
                enabled: false
                # -- List of custom rules for the Repo server's Cluster Role resource
                rules: []

              # -- Repo server rbac rules
              rbac: []
              #   - apiGroups:
              #     - argoproj.io
              #     resources:
              #     - applications
              #     verbs:
              #     - get
              #     - list
              #     - watch

            ## ApplicationSet controller
            applicationSet:
              # -- Enable ApplicationSet controller
              enabled: true

              ## Metrics service configuration
              metrics:
                # -- Deploy metrics service
                enabled: false
                serviceMonitor:
                  # -- Enable a prometheus ServiceMonitor
                  enabled: false

              # -- Resource limits and requests for the ApplicationSet controller pods.
              resources: {}
                # limits:
                #   cpu: 100m
                #   memory: 128Mi
                # requests:
                #   cpu: 100m
                #   memory: 128Mi

              # TLS certificate configuration via cert-manager
              ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/tls/#tls-configuration
              certificate:
                # -- Deploy a Certificate resource (requires cert-manager)
                enabled: false
                # -- The name of the Secret that will be automatically created and managed by this Certificate resource
                secretName: argocd-application-controller-tls
                # -- Certificate primary domain (commonName)
                domain: '{{ .argo_cd_hostname }}'
                # -- Certificate Subject Alternate Names (SANs)
                additionalHosts: []
                # -- The requested 'duration' (i.e. lifetime) of the certificate.
                # @default -- `""` (defaults to 2160h = 90d if not specified)
                ## Ref: https://cert-manager.io/docs/usage/certificate/#renewal
                duration: ""
                # -- How long before the expiry a certificate should be renewed.
                # @default -- `""` (defaults to 360h = 15d if not specified)
                ## Ref: https://cert-manager.io/docs/usage/certificate/#renewal
                renewBefore: ""
                # Certificate issuer
                ## Ref: https://cert-manager.io/docs/concepts/issuer
                issuer:
                  # -- Certificate issuer group. Set if using an external issuer. Eg. `cert-manager.io`
                  group: ""
                  # -- Certificate issuer kind. Either `Issuer` or `ClusterIssuer`
                  kind: ""
                  # -- Certificate issuer name. Eg. `letsencrypt`
                  name: ""
                # Private key of the certificate
                privateKey:
                  # -- Rotation policy of private key when certificate is re-issued. Either: `Never` or `Always`
                  rotationPolicy: Never
                  # -- The private key cryptography standards (PKCS) encoding for private key. Either: `PCKS1` or `PKCS8`
                  encoding: PKCS1
                  # -- Algorithm used to generate certificate private key. One of: `RSA`, `Ed25519` or `ECDSA`
                  algorithm: RSA
                  # -- Key bit size of the private key. If algorithm is set to `Ed25519`, size is ignored.
                  size: 2048

            ## Notifications controller
            notifications:
              # -- Enable notifications controller
              enabled: true
              # -- Notifications controller name string
              name: notifications-controller

              # -- Argo CD dashboard url; used in place of {{.context.argocdUrl}} in templates
              argocdUrl:

              # -- Define user-defined context
              # ref: https://argocd-notifications.readthedocs.io/en/stable/templates/#defining-user-defined-context
              context: {}
                # region: east
                # environmentName: staging

              metrics:
                # -- Enables prometheus metrics server
                enabled: false
                # -- Metrics port
                port: 9001
                service:
                  # -- Metrics service port name
                  portName: http-metrics
                serviceMonitor:
                  # -- Enable a prometheus ServiceMonitor
                  enabled: false
