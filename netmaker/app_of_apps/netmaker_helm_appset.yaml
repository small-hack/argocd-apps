# webapp is deployed 2nd because we need secrets
---
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: netmaker-appset
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "3"
spec:
  goTemplate: true
  # generator allows us to source specific values from an external secret
  generators:
    - plugin:
        configMapRef:
          name: secret-var-plugin-generator
        input:
          parameters:
            secret_vars:
              - netmaker_hostname
              - netmaker_admin_hostname
              - netmaker_api_hostname
              - netmaker_broker_hostname
              - global_cluster_issuer
  template:
    metadata:
      name: netmaker-helm
    spec:
      project: netmaker
      syncPolicy:
        syncOptions:
          - ApplyOutOfSyncOnly=true
        automated:
          selfHeal: true
      destination:
        server: https://kubernetes.default.svc
        namespace: netmaker
      source:
        repoURL: 'https://small-hack.github.io/netmaker-helm'
        targetRevision: 0.14.0
        chart: netmaker
        helm:
          releaseName: netmaker
          valuesObject:
            # -- number of netmaker server replicas to create
            replicas: 1
            
            image:
              # -- The image repo to pull Netmaker image from
              repository: gravitl/netmaker

            netmaker:
              serverName: "{{ .netmaker_hostname }}"
              # keys: MASTER_KEY, optionally: LICENSE_KEY, NETMAKER_TENANT_ID
              existingSecret: netmaker-admin-credentials

              admin:
                # keys: ADMIN_USER, ADMIN_PASSWORD
                existingSecret: netmaker-admin-credentials
              
              oauth:
                enabled: true
                provider: "oidc"
                existingSecret: netmaker-oauth-config
            
            api:
              service:
                # -- type for netmaker server services
                type: ClusterIP
                # -- port for API service
                port: 8081
                # -- targetport for API service
                targetPort: 8081

              ingress:
                # -- attempts to configure ingress if true
                enabled: true
                # -- api (REST) route subdomain
                host: '{{ .netmaker_api_hostname }}'
                # -- api ingress className
                className: "nginx"
                # -- annotations for the netmaker API ingress object
                annotations:
                  cert-manager.io/cluster-issuer: '{{ .global_cluster_issuer }}'
                # -- ingress api tls list
                tls:
                  - secretName: netmaker-api-tls
                    hosts:
                      - '{{ .netmaker_api_hostname }}'
            
            ui:
              # -- how many UI replicas to create
              replicas: 1
              service:
                # -- type for netmaker server services
                type: ClusterIP
                # -- port for UI service
                port: 80
                # -- target port for UI service
                targetport: 80
              ingress:
                # -- attempts to configure ingress if true
                enabled: true
                # -- hostname for mqtt ingress
                host: '{{ .netmaker_admin_hostname }}'
                # -- UI ingress className
                className: "nginx"
                annotations:
                  cert-manager.io/cluster-issuer: '{{ .global_cluster_issuer }}'
                # -- ingress tls list
                tls:
                  - secretName: netmaker-ui-tls
                    hosts:
                      - '{{ .netmaker_admin_hostname }}'
            
            mq:
              # -- how many MQTT replicas to create
              replicas: 1
              # secret keys must be: MQ_PASSWORD, MQ_USERNAME
              existingSecret: 'netmaker-mq-credentials'
              persistence:
                existingClaim: "netmaker-mq-pvc"
              service:
                # -- type for netmaker server services
                type: ClusterIP
                # -- port for MQTT service
                port: 443
                # -- Target port for MQTT service
                targetPort: 8883
              ingress:
                # -- attempts to configure ingress if true
                enabled: true
                # -- hostname for mqtt ingress
                host: '{{ .netmaker_broker_hostname }}'
                className: "nginx"
                # -- annotations for the mqtt ingress object
                annotations:
                  cert-manager.io/cluster-issuer: '{{ .global_cluster_issuer }}'
                tls:
                  - secretName: netmaker-mqtt-tls
                    hosts:
                      - '{{ .netmaker_broker_hostname }}'
            
            dns:
              # -- whether or not to deploy coredns
              enabled: false
            
            setIpForwarding:
              enabled: true
            
            postgresql:
              enabled: true
              auth:
                # -- postgres user to generate
                username: netmaker
                # -- postgress database
                database: netmaker
                # keys must be: SQL_PASS, SQL_HOST, SQL_PORT, SQL_USER, SQL_DB
                existingSecret: netmaker-pgsql-credentials
                secretKeys:
                  userPasswordKey: SQL_PASS
                  adminPasswordKey: postgres_password
                replicaCount: 2
              volumePermissions:
                enabled: true
              primary:
                podAnnotations:
                  k8up.io/backupcommand: "sh -c 'PGDATABASE=\"$POSTGRES_DB\" PGUSER=\"$POSTGRES_USER\" PGPASSWORD=\"$POSTGRES_PASSWORD\" pg_dump --clean'"
                  k8up.io/file-extension: .sql
                pgHbaConfiguration: |-
                  local all all trust
                  host all all 127.0.0.1/32 md5
                  host all netmaker 10.0.0.0/8 md5
                # type database user cidr-address method
                # host all postgres 10.0.0.0/8 md5
                # alls traffic from everywhere
                # host all all 0.0.0.0/0 md5
                initdb:
                  scripts:
                    my_init_script.sql: |
                      ALTER DATABASE netmaker OWNER TO netmaker;
                      GRANT ALL PRIVILEGES ON DATABASE netmaker TO netmaker;
                      GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO netmaker;
                persistence:
                  enabled: true
                  existingClaim: netmaker-postgresql

            turn:
              # -- use an external turn server
              enabled: false
              host: ""
              apiHost: ""
              username: ""
              password: ""
              # -- existing secret with turn server info. Must have the following keys:
              # TURN_SERVER_HOST, TURN_SERVER_API_HOST, TURN_PORT, TURN_USERNAME, TURN_PASSWORD
              existingSecret: ""
