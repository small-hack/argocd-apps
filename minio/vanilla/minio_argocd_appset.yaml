---
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: minio-app-set
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "2"
spec:
  goTemplate: true
  # generator allows us to source specific values from an external k8s secret
  generators:
    - plugin:
        configMapRef:
          name: secret-var-plugin-generator
        input:
          parameters:
            secret_vars:
              - minio_admin_console_hostname
              - global_cluster_issuer
  template:
    metadata:
      name: minio
      annotations:
        argocd.argoproj.io/sync-wave: "2"
    spec:
      project: minio
      destination:
        server: "https://kubernetes.default.svc"
        namespace: minio
      syncPolicy:
        syncOptions:
          - ApplyOutOfSyncOnly=true
        automated:
          prune: true
          selfHeal: true
      source:
        # official minio helm repo
        repoURL: 'https://charts.min.io/'
        chart: minio
        targetRevision: 5.4.0
        helm:
          releaseName: minio
          values: |
            ## Use existing Secret that store following variables:
            ## .data.rootUser and .data.rootPassword are mandatory,
            existingSecret: "minio-root-credentials"
            
            ## TLS Settings for MinIO
            tls:
              enabled: false
              ## Create a secret with private.key and public.crt files and pass that here. Ref: https://github.com/minio/minio/tree/master/docs/tls/kubernetes#2-create-kubernetes-secret
              certSecret: ""
              publicCrt: public.crt
              privateKey: private.key

            ## Trusted Certificates Settings for MinIO. Ref: https://min.io/docs/minio/linux/operations/network-encryption.html#third-party-certificate-authorities
            ## Bundle multiple trusted certificates into one secret and pass that here. Ref: https://github.com/minio/minio/tree/master/docs/tls/kubernetes#2-create-kubernetes-secret
            ## When using self-signed certificates, remember to include MinIO's own certificate in the bundle with key public.crt.
            ## If certSecret is left empty and tls is enabled, this chart installs the public certificate from .Values.tls.certSecret.
            trustedCertsSecret: ""

            ## Enable persistence using Persistent Volume Claims
            ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
            ##
            persistence:
              enabled: true
              ## A manually managed Persistent Volume and Claim
              ## Requires persistence.enabled: true
              ## If defined, PVC must be created manually before volume will be bound
              existingClaim: "minio-data"

            ingress:
              enabled: true
              ingressClassName: nginx
              annotations:
                cert-manager.io/cluster-issuer: {{ .global_cluster_issuer }}
                # kubernetes.io/ingress.allow-http: "false"
                # kubernetes.io/ingress.global-static-ip-name: ""
                # nginx.ingress.kubernetes.io/proxy-body-size: 10G
                # nginx.ingress.kubernetes.io/secure-backends: "true"
                # nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
                # nginx.ingress.kubernetes.io/whitelist-source-range: 0.0.0.0/0
              path: /
              hosts:
                - {{ .minio_admin_console_hostname }}
              tls:
                - secretName: minio-tls
                  hosts:
                    - {{ .minio_admin_console_hostname }}

            ## List of policies to be created after minio install
            ##
            ## In addition to default policies [readonly|readwrite|writeonly|consoleAdmin|diagnostics]
            ## you can define additional policies with custom supported actions and resources
            policies: []
            ## writeexamplepolicy policy grants creation or deletion of buckets with name
            ## starting with example. In addition, grants objects write permissions on buckets starting with
            ## example.
            # - name: writeexamplepolicy
            #   statements:
            #     - effect: Allow  # this is the default
            #       resources:
            #         - 'arn:aws:s3:::example*/*'
            #       actions:
            #         - "s3:AbortMultipartUpload"
            #         - "s3:GetObject"
            #         - "s3:DeleteObject"
            #         - "s3:PutObject"
            #         - "s3:ListMultipartUploadParts"
            #     - resources:
            #         - 'arn:aws:s3:::example*'
            #       actions:
            #         - "s3:CreateBucket"
            #         - "s3:DeleteBucket"
            #         - "s3:GetBucketLocation"
            #         - "s3:ListBucket"
            #         - "s3:ListBucketMultipartUploads"
            ## readonlyexamplepolicy policy grants access to buckets with name starting with example.
            ## In addition, grants objects read permissions on buckets starting with example.
            # - name: readonlyexamplepolicy
            #   statements:
            #     - resources:
            #         - 'arn:aws:s3:::example*/*'
            #       actions:
            #         - "s3:GetObject"
            #     - resources:
            #         - 'arn:aws:s3:::example*'
            #       actions:
            #         - "s3:GetBucketLocation"
            #         - "s3:ListBucket"
            #         - "s3:ListBucketMultipartUploads"
            ## conditionsexample policy creates all access to example bucket with aws:username="johndoe" 
            ##  and source ip range 10.0.0.0/8 and 192.168.0.0/24 only
            # - name: conditionsexample
            #   statements:
            #     - resources:
            #       - 'arn:aws:s3:::example/*'
            #       actions:
            #       - 's3:*'
            #       conditions:
            #         - StringEquals: '"aws:username": "johndoe"'
            #         - IpAddress: |
            #             "aws:SourceIp": [
            #               "10.0.0.0/8",
            #               "192.168.0.0/24"
            #             ]
            #
            ## Additional stuff for the Kubernetes Job makePolicyJob
            makePolicyJob:
              securityContext:
                enabled: false
                runAsUser: 1000
                runAsGroup: 1000
              resources:
                requests:
                  memory: 128Mi
              # Command to run after the main command on exit
              exitCommand: ""
            
            ## List of users to be created after minio install
            ##
            users:
              ## Username, password and policy to be assigned to the user
              ## Default policies are [readonly|readwrite|writeonly|consoleAdmin|diagnostics]
              ## Add new policies as explained here https://min.io/docs/minio/kubernetes/upstream/administration/identity-access-management.html#access-management
              ## NOTE: this will fail if LDAP is enabled in your MinIO deployment
              ## make sure to disable this if you are using LDAP.
              - accessKey: console
                secretKey: console123
                policy: consoleAdmin
              # Or you can refer to specific secret
              #- accessKey: externalSecret
              #  existingSecret: my-secret
              #  existingSecretKey: password
              #  policy: readonly
            
            ## Additional stuff for the Kubernetes Job makeUserJob
            makeUserJob:
              securityContext:
                enabled: false
                runAsUser: 1000
                runAsGroup: 1000
              resources:
                requests:
                  memory: 128Mi
              # Command to run after the main command on exit
              exitCommand: ""

            ## List of service accounts to be created after minio install
            ##
            svcaccts: []
              ## accessKey, secretKey and parent user to be assigned to the service accounts
              ## Add new service accounts as explained here https://min.io/docs/minio/kubernetes/upstream/administration/identity-access-management/minio-user-management.html#service-accounts
              # - accessKey: console-svcacct
              #   secretKey: console123
              #   user: console
              ## Or you can refer to specific secret
              # - accessKey: externalSecret
              #   existingSecret: my-secret
              #   existingSecretKey: password
              #   user: console
              ## You also can pass custom policy
              # - accessKey: console-svcacct
              #   secretKey: console123
              #   user: console
              #   policy:
              #     statements:
              #       - resources:
              #           - 'arn:aws:s3:::example*/*'
              #         actions:
              #           - "s3:AbortMultipartUpload"
              #           - "s3:GetObject"
              #           - "s3:DeleteObject"
              #           - "s3:PutObject"
              #           - "s3:ListMultipartUploadParts"

            makeServiceAccountJob:
              securityContext:
                enabled: false
                runAsUser: 1000
                runAsGroup: 1000
              resources:
                requests:
                  memory: 128Mi
              # Command to run after the main command on exit
              exitCommand: ""

            ## List of buckets to be created after minio install
            ##
            buckets: []
              #   # Name of the bucket
              # - name: bucket1
              #   # Policy to be set on the
              #   # bucket [none|download|upload|public]
              #   policy: none
              #   # Purge if bucket exists already
              #   purge: false
              #   # set versioning for
              #   # bucket [true|false]
              #   versioning: false
              #   # set objectlocking for
              #   # bucket [true|false] NOTE: versioning is enabled by default if you use locking
              #   objectlocking: false

            ## Additional Annotations for the Kubernetes Job makeBucketJob
            makeBucketJob:
              securityContext:
                enabled: false
                runAsUser: 1000
                runAsGroup: 1000
              resources:
                requests:
                  memory: 128Mi
              # Command to run after the main command on exit
              exitCommand: ""

            ## List of command to run after minio install
            ## NOTE: the mc command TARGET is always "myminio"
            customCommands:
              # - command: "admin policy attach myminio consoleAdmin --group='cn=ops,cn=groups,dc=example,dc=com'"

            ## Additional Annotations for the Kubernetes Job customCommandJob
            customCommandJob:
              securityContext:
                enabled: false
                runAsUser: 1000
                runAsGroup: 1000
              resources:
                requests:
                  memory: 128Mi
              # Command to run after the main command on exit
              exitCommand: ""

            networkPolicy:
              enabled: false
              allowExternal: true

            ## Specify the service account to use for the MinIO pods. If 'create' is set to 'false'
            ## and 'name' is left unspecified, the account 'default' will be used.
            serviceAccount:
              create: true
              ## The name of the service account to use. If 'create' is 'true', a service account with that name
              ## will be created.
              name: "minio-sa"

            metrics:
              serviceMonitor:
                enabled: false
