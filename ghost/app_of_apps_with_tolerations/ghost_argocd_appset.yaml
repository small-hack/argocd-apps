---
# third sync wave because it has to be up after mysql
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: ghost-app-set
  namespace: argocd
spec:
  goTemplate: true
  # generator allows us to source specific values from an external k8s secret
  generators:
    - plugin:
        configMapRef:
          name: secret-var-plugin-generator
        input:
          parameters:
            secret_vars:
              - global_cluster_issuer
              - ghost_hostname
              - ghost_admin_hostname
              - ghost_admin_user
              - ghost_admin_email
              - ghost_blog_title
              - ghost_smtp_hostname
              - ghost_smtp_port
              - ghost_smtp_user
              - ghost_toleration_key
              - ghost_toleration_operator
              - ghost_toleration_value
              - ghost_toleration_effect
              - ghost_affinity_key
              - ghost_affinity_value
              # - ghost_s3_endpoint
  template:
    metadata:
      name: ghost-web-app
      annotations:
        argocd.argoproj.io/sync-wave: "3"
    spec:
      project: ghost

      destination:
        server: https://kubernetes.default.svc
        namespace: ghost

      syncPolicy:
        syncOptions:
          - ApplyOutOfSyncOnly=true
        automated:
          prune: true
          selfHeal: true

      source:
        repoURL: https://small-hack.github.io/ghost-helm-chart
        chart: ghost
        targetRevision: 1.12.0
        helm:
          releaseName: "ghost"
          # https://github.com/small-hack/ghost-helm-chart/blob/main/charts/ghost/values.yaml
          valuesObject:
            fullnameOverride: "ghost"

            ghost:
              # -- public url of the ghost blog
              url: 'https://{{ .ghost_hostname }}'

              # -- domain of the ghost blog
              domain: '{{ .ghost_hostname }}'

              # -- admin domain of the ghost blog
              admin_domain: '{{ .ghost_admin_hostname }}'

              # -- public url of the ghost blog
              admin_url: 'https://{{ .ghost_admin_hostname }}'

              # -- title of your ghost blog
              blog_title: '{{ .ghost_blog_title }}'

              # -- enable HTTPS for the ghost blog
              enable_https: false

              # -- skip install of ghost at pod restart
              skip_bootstrap: true

              # admin info
              admin:
                # -- existing kubernetes secret with ghost admin credentials
                existingSecret: "ghost-admin-credentials"
                # keys in existing kubernetes secret for admin credentials
                secretKeys:
                  username: "username"
                  password: "ghost-password"
                  email: "email"

              smtp:
                # -- existing kubernetes secret with ghost smtp credentials
                existingSecret: "ghost-smtp-credentials"
                # keys in existing kubernetes secret for smtp credentials
                secretKeys:
                  host: "hostname"
                  port: "port"
                  protocol: "protocol"
                  username: "username"
                  password: "password"
                  from_address: "from_address"

            # Set container requests and limits for different resources like CPU or memory (essential for production workloads)
            resources:
              requests:
                cpu: 200m
                memory: 512Mi
              limits:
                cpu: 3
                memory: 2Gi

            ## Configure the ingress resource that allows you to access the Ghost installation
            ingress:
              # Enable ingress record generation for Ghost
              enabled: true

              # Default host for the ingress record
              hosts:
                - host: '{{ .ghost_hostname }}'
                  paths:
                    - path: /
                      pathType: Prefix

              # Default path for the ingress record
              className: "nginx"

              # Additional custom annotations for Ghost service
              annotations:
                kubernetes.io/tls-acme: "true"
                cert-manager.io/cluster-issuer: '{{ .global_cluster_issuer }}'
                nginx.ingress.kubernetes.io/ssl-redirect: "true"
                nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
              tls:
                - secretName: ghost-tls
                  hosts:
                    - '{{ .ghost_hostname }}'
                    - '{{ .ghost_admin_hostname }}'

            ## Persistence Parameters
            ## ref: https://kubernetes.io/docs/concepts/storage/persistent-volumes/
            persistence:
              # The name of an existing PVC to use for persistence
              existingClaim: "ghost-data"

            # External Database Configuration
            externalDatabase:
              existingSecret: "ghost-mysql-credentials"
              secretKeys:
                hostname: "host"
                port: "port"
                username: "username"
                password: "mysql-password"
                root_password: "mysql-root-password"
                database: "database"

            tolerations:
              - key: '{{ .ghost_toleration_key }}'
                operator: '{{ .ghost_toleration_operator }}'
                value: '{{ .ghost_toleration_value }}'
                effect: '{{ .ghost_toleration_effect }}'

            affinity:
              nodeAffinity:
                requiredDuringSchedulingIgnoredDuringExecution:
                  nodeSelectorTerms:
                    - matchExpressions:
                      - key: '{{ .ghost_affinity_key }}'
                        operator: In
                        values:
                          - '{{ .ghost_affinity_value }}'

            activity_pub:
              # not sure what this does
              skipSignatureVerfication: false
              # External Database Configuration
              externalDatabase:
                existingSecret: ghost-activitypub-mysql-credentials
                secretKeys:
                  hostname: "host"
                  port: "port"
                  username: "username"
                  password: "mysql-password"
                  root_password: "mysql-root-password"
                  database: "database"
                  connection_string: "mysql-connection-string"

            # Options for embedded nginx reverse-proxy
            proxy:
              # -- enable/disable the embedded proxy
              enabled: true

              service:
                # -- port exposed by proxy service
                port: 2368

              # -- config to be mounted into the nginx container
              config: |-
                user nginx;

                worker_processes  1;

                events {
                  worker_connections  10240;
                }

                http {
                  map $status $header_content_type_options {
                      204 "";
                      default "nosniff";
                  }

                  server {
                      listen 80;
                      listen [::]:80;

                      location ~ /.ghost/activitypub/* {
                          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                          proxy_set_header X-Forwarded-Proto $scheme;
                          proxy_set_header X-Real-IP $remote_addr;
                          proxy_set_header Host $http_host;
                          add_header X-Content-Type-Options $header_content_type_options;
                          proxy_ssl_server_name on;
                          proxy_pass 'http://ghost-activitypub:8080;
                      }

                      location ~ /.well-known/(webfinger|nodeinfo) {
                          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                          proxy_set_header X-Forwarded-Proto $scheme;
                          proxy_set_header X-Real-IP $remote_addr;
                          proxy_set_header Host $http_host;
                          add_header X-Content-Type-Options $header_content_type_options;
                          proxy_ssl_server_name on;
                          proxy_pass http://ghost-activitypub:8080;
                      }

                      location / {
                          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                          proxy_set_header X-Forwarded-Proto $scheme;
                          proxy_set_header X-Real-IP $remote_addr;
                          proxy_set_header Host $http_host;
                          proxy_pass http://127.0.0.1:2368;
                          add_header X-Content-Type-Options $header_content_type_options;
                      }

                      client_max_body_size 50m;
                  }
                }
