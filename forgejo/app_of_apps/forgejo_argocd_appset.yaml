---
# webapp is deployed 2nd because we need secrets and persistent volumes up 1st
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: forgejo-web-app-set
  namespace: argocd
spec:
  goTemplate: true
  # generator allows us to source specific values from an external k8s secret
  generators:
    - plugin:
        configMapRef:
          name: secret-var-plugin-generator
        input:
          parameters:
            secret_vars:
              - forgejo_hostname
              - global_cluster_issuer
  template:
    metadata:
      name: forgejo-web-app
      # annotations:
      #   argocd.argoproj.io/sync-wave: "3"
    spec:
      project: default
      destination:
        server: https://kubernetes.default.svc
        namespace: forgejo
      syncPolicy:
        syncOptions:
          - CreateNamespace=true
          - ApplyOutOfSyncOnly=true
        automated:
          prune: true
          selfHeal: true
      source:
        repoURL: 'code.forgejo.org'
        targetRevision: 14.0.4
        chart: forgejo-helm/forgejo
        helm:
          valuesObject:
            # Default values for gitea.
            # This is a YAML-formatted file.
            # Declare variables to be passed into your templates.
            ## @section Global
            #
            ## @param global.imageRegistry global image registry override
            ## @param global.imagePullSecrets global image pull secrets override; can be extended by `imagePullSecrets`
            ## @param global.storageClass global storage class override
            ## @param global.hostAliases global hostAliases which will be added to the pod's hosts files
            global:
              imageRegistry: ''
              ## E.g.
              ## imagePullSecrets:
              ##   - myRegistryKeySecretName
              ##
              imagePullSecrets: []
              storageClass: ''
              hostAliases: []
              # - ip: 192.168.137.2
              #   hostnames:
              #   - example.com

            ## @param namespaceOverride String to fully override common.names.namespace
            ##
            namespaceOverride: ''

            ## @param replicaCount number of replicas for the deployment
            replicaCount: 1

            ## @section strategy
            ## @param strategy.type strategy type
            ## @param strategy.rollingUpdate.maxSurge maxSurge
            ## @param strategy.rollingUpdate.maxUnavailable maxUnavailable
            strategy:
              type: 'RollingUpdate'
              rollingUpdate:
                maxSurge: '100%'
                maxUnavailable: 0

            ## @param clusterDomain cluster domain
            clusterDomain: cluster.local

            ## @section Image
            ## @param image.registry image registry, e.g. gcr.io,docker.io
            ## @param image.repository Image to start for this pod
            ## @param image.tag Visit: [Image tag](https://code.forgejo.org/forgejo/-/packages/container/forgejo/versions). Defaults to `appVersion` within Chart.yaml.
            ## @param image.digest Image digest. Allows to pin the given image tag. Useful for having control over mutable tags like `latest`
            ## @param image.pullPolicy Image pull policy
            ## @param image.rootless Wether or not to pull the rootless version of Forgejo
            ## @param image.fullOverride Completely overrides the image registry, path/image, tag and digest. **Adjust `image.rootless` accordingly and review [Rootless defaults](#rootless-defaults).**
            image:
              registry: code.forgejo.org
              repository: forgejo/forgejo
              # Overrides the image tag whose default is the chart appVersion.
              tag: ''
              digest: ''
              pullPolicy: IfNotPresent
              rootless: true
              fullOverride: ''

            ## @param imagePullSecrets Secret to use for pulling the image
            imagePullSecrets: []

            ## @section Security
            # Security context is only usable with rootless image due to image design
            ## @param podSecurityContext.fsGroup Set the shared file system group for all containers in the pod.
            podSecurityContext:
              fsGroup: 1000

            ## @param containerSecurityContext Security context
            containerSecurityContext: {}
            #   allowPrivilegeEscalation: false
            #   capabilities:
            #     drop:
            #       - ALL
            #   # Add the SYS_CHROOT capability for root and rootless images if you intend to
            #   # run pods on nodes that use the container runtime cri-o. Otherwise, you will
            #   # get an error message from the SSH server that it is not possible to read from
            #   # the repository.
            #   # https://gitea.com/gitea/helm-chart/issues/161
            #     add:
            #       - SYS_CHROOT
            #   privileged: false
            #   readOnlyRootFilesystem: true
            #   runAsGroup: 1000
            #   runAsNonRoot: true
            #   runAsUser: 1000

            ## @deprecated The securityContext variable has been split two:
            ## - containerSecurityContext
            ## - podSecurityContext.
            ## @param securityContext Run init and Forgejo containers as a specific securityContext
            securityContext: {}

            ## @param podDisruptionBudget Pod disruption budget
            podDisruptionBudget: {}
            #  maxUnavailable: 1
            #  minAvailable: 1

            ## @section Service
            service:
              ## @param service.http.type Kubernetes service type for web traffic
              ## @param service.http.port Port number for web traffic
              ## @param service.http.clusterIP ClusterIP setting for http autosetup for deployment is None
              ## @param service.http.loadBalancerIP LoadBalancer IP setting
              ## @param service.http.nodePort NodePort for http service
              ## @param service.http.externalTrafficPolicy If `service.http.type` is `NodePort` or `LoadBalancer`, set this to `Local` to enable source IP preservation
              ## @param service.http.externalIPs External IPs for service
              ## @param service.http.ipFamilyPolicy HTTP service dual-stack policy
              ## @param service.http.ipFamilies HTTP service dual-stack familiy selection,for dual-stack parameters see official kubernetes [dual-stack concept documentation](https://kubernetes.io/docs/concepts/services-networking/dual-stack/).
              ## @param service.http.loadBalancerSourceRanges Source range filter for http loadbalancer
              ## @param service.http.annotations HTTP service annotations
              ## @param service.http.labels HTTP service additional labels
              ## @param service.http.loadBalancerClass Loadbalancer class
              http:
                type: ClusterIP
                port: 3000
                clusterIP: None
                loadBalancerIP:
                nodePort:
                externalTrafficPolicy:
                externalIPs:
                ipFamilyPolicy:
                ipFamilies:
                loadBalancerSourceRanges: []
                annotations: {}
                labels: {}
                loadBalancerClass:
              ## @param service.ssh.type Kubernetes service type for ssh traffic
              ## @param service.ssh.port Port number for ssh traffic
              ## @param service.ssh.clusterIP ClusterIP setting for ssh autosetup for deployment is None
              ## @param service.ssh.loadBalancerIP LoadBalancer IP setting
              ## @param service.ssh.nodePort NodePort for ssh service
              ## @param service.ssh.externalTrafficPolicy If `service.ssh.type` is `NodePort` or `LoadBalancer`, set this to `Local` to enable source IP preservation
              ## @param service.ssh.externalIPs External IPs for service
              ## @param service.ssh.ipFamilyPolicy SSH service dual-stack policy
              ## @param service.ssh.ipFamilies SSH service dual-stack familiy selection,for dual-stack parameters see official kubernetes [dual-stack concept documentation](https://kubernetes.io/docs/concepts/services-networking/dual-stack/).
              ## @param service.ssh.hostPort HostPort for ssh service
              ## @param service.ssh.loadBalancerSourceRanges Source range filter for ssh loadbalancer
              ## @param service.ssh.annotations SSH service annotations
              ## @param service.ssh.labels SSH service additional labels
              ## @param service.ssh.loadBalancerClass Loadbalancer class
              ssh:
                type: ClusterIP
                port: 22
                clusterIP: None
                loadBalancerIP:
                nodePort:
                externalTrafficPolicy:
                externalIPs:
                ipFamilyPolicy:
                ipFamilies:
                hostPort:
                loadBalancerSourceRanges: []
                annotations: {}
                labels: {}
                loadBalancerClass:

            ## @section Ingress
            ## @param ingress.enabled Enable ingress
            ## @param ingress.className Ingress class name
            ## @param ingress.annotations Ingress annotations
            ## @param ingress.hosts[0].host Default Ingress host
            ## @param ingress.hosts[0].paths[0].path Default Ingress path
            ## @param ingress.hosts[0].paths[0].pathType Ingress path type
            ## @param ingress.tls Ingress tls settings
            ## @extra ingress.apiVersion Specify APIVersion of ingress object. Mostly would only be used for argocd.
            ingress:
              enabled: true
              className: nginx
              annotations:
                cert-manager.io/cluster-issuer: letsencrypt-prod
                kubernetes.io/tls-acme: "true"
              hosts:
                - host: '{{ .forgejo_hostname }}'
                  paths:
                    - path: /
                      pathType: Prefix
              tls:
                - secretName: forgejo-tls
                  hosts:
                   - '{{ .forgejo_hostname }}'
              # Mostly for argocd or any other CI that uses `helm template | kubectl apply` or similar
              # If helm doesn't correctly detect your ingress API version you can set it here.
              # apiVersion: networking.k8s.io/v1

            ## @section Route
            ## @param route.enabled Enable route
            ## @param route.annotations Route annotations
            ## @param route.host Host to use for the route (will be assigned automatically by OKD / OpenShift is not defined)
            ## @param route.wildcardPolicy Wildcard policy if any for the route, currently only 'Subdomain' or 'None' is allowed.
            ## @param route.tls.termination termination type (see [OKD documentation](https://docs.okd.io/latest/rest_api/network_apis/route-route-openshift-io-v1.html#spec-tls))
            ## @param route.tls.insecureEdgeTerminationPolicy the desired behavior for insecure connections to a route (e.g. with http)
            ## @param route.tls.existingSecret the name of a predefined secret of type kubernetes.io/tls with both key (tls.crt and tls.key) set accordingly (if defined attributes 'certificate', 'caCertificate' and 'privateKey' are ignored)
            ## @param route.tls.certificate PEM encoded single certificate
            ## @param route.tls.privateKey PEM encoded private key
            ## @param route.tls.caCertificate PEM encoded CA certificate or chain that issued the certificate
            ## @param route.tls.destinationCACertificate PEM encoded CA certificate used to verify the authenticity of final end point when 'termination' is set to 'passthrough' (ignored otherwise)
            route:
              enabled: false
              annotations: {}
              host:
              wildcardPolicy:
              tls:
                termination: edge
                insecureEdgeTerminationPolicy: Redirect
                existingSecret:
                certificate:
                # certificate: |-
                # -----BEGIN CERTIFICATE-----
                # ...
                # -----END CERTIFICATE-----
                privateKey:
                # privateKey: |-
                # -----BEGIN PRIVATE KEY-----
                # ...
                # -----END PRIVATE KEY-----
                caCertificate:
                # caCertificate: |-
                # -----BEGIN CERTIFICATE-----
                # ...
                # -----END CERTIFICATE-----
                destinationCACertificate:
                # destinationCACertificate: |-
                # -----BEGIN CERTIFICATE-----
                # ...
                # -----END CERTIFICATE-----

            ## @section deployment
            #
            ## @param resources Kubernetes resources
            resources:
              # We usually recommend not to specify default resources and to leave this as a conscious
              # choice for the user. This also increases chances charts run on environments with little
              # resources, such as Minikube. If you do want to specify resources, uncomment the following
              # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
              limits:
                cpu: 2
                memory: 2048Mi
              requests:
                cpu: 100m
                memory: 128Mi

            ## Use an alternate scheduler, e.g. "stork".
            ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
            ##
            ## @param schedulerName Use an alternate scheduler, e.g. "stork"
            schedulerName: ''

            ## @param nodeSelector NodeSelector for the deployment
            nodeSelector: {}

            ## @param tolerations Tolerations for the deployment
            tolerations: []

            ## @param affinity Affinity for the deployment
            affinity: {}

            ## @param topologySpreadConstraints TopologySpreadConstraints for the deployment
            topologySpreadConstraints: []

            ## @param dnsConfig dnsConfig for the deployment
            dnsConfig: {}

            ## @param priorityClassName priorityClassName for the deployment
            priorityClassName: ''

            deployment:
              env:
                []
                # - name: VARIABLE
                #   value: my-value
              terminationGracePeriodSeconds: 60
              labels: {}
              annotations: {}

            ## @section ServiceAccount

            serviceAccount:
              create: false
              name: ''
              automountServiceAccountToken: false
              imagePullSecrets: []
              # - name: private-registry-access
              annotations: {}
              labels: {}

            persistence:
              enabled: true
              create: false
              mount: true
              claimName: forgejo

            ## @param extraVolumes Additional volumes to mount to the Forgejo deployment
            extraVolumes: []
            # - name: postgres-ssl-vol
            #   secret:
            #     secretName: gitea-postgres-ssl

            extraContainerVolumeMounts: []

            extraInitVolumeMounts: []

            extraVolumeMounts: []
            # - name: postgres-ssl-vol
            #   readOnly: true
            #   mountPath: "/pg-ssl"

            ## @section Init
            ## @param initPreScript Bash shell script copied verbatim to the start of the init-container.
            initPreScript: ''

            initContainers:
              resources:
                limits: {}
                requests:
                  cpu: 100m
                  memory: 128Mi

            signing:
              enabled: false
              gpgHome: /data/git/.gnupg
              privateKey: ''
              # privateKey: |-
              #   -----BEGIN PGP PRIVATE KEY BLOCK-----
              #   ...
              #   -----END PGP PRIVATE KEY BLOCK-----
              existingSecret: ''

            ## @section Gitea
            #
            gitea:
              admin:
                existingSecret: forgejo-admin-credentials
                email: 'gitea@local.domain'
                passwordMode: keepUpdated

              metrics:
                enabled: true
                serviceMonitor:
                  enabled: true
                  # namespace: 'monitoring'
                  #  additionalLabels:
                  #    prometheus-release: prom1

              ## @param gitea.ldap LDAP configuration
              ldap: []

              # Either specify inline `key` and `secret` or refer to them via `existingSecret`
              ## @param gitea.oauth OAuth configuration
              oauth:
                - name: 'Zitadel'
                  provider: zitadel
                  existingSecret: oidc-forgejo
                  autoDiscoverUrl: https://iam.vleermuis.tech

              ## @param gitea.additionalConfigSources Additional configuration from secret or configmap
              additionalConfigSources: []
              #   - secret:
              #       secretName: gitea-app-ini-oauth
              #   - configMap:
              #       name: gitea-app-ini-plaintext

              ## @param gitea.additionalConfigFromEnvs Additional configuration sources from environment variables
              additionalConfigFromEnvs:
              - name: FORGEJO__CACHE__HOST
                valueFrom:
                  secretKeyRef:
                    name: forgejo-valkey-credentials
                    key: REDIS_URL
              - name: FORGEJO__QUEUE__CONN_STR
                valueFrom:
                  secretKeyRef:
                    name: redis-creds
                    key: REDIS_URL
              - name: FORGEJO__DATABASE__USER
                valueFrom:
                  secretKeyRef:
                    name: forgejo-pgsql-credentials
                    key: username
              - name: FORGEJO__DATABASE__PASSWD
                valueFrom:
                  secretKeyRef:
                    name: forgejo-pgsql-credentials
                    key: password

              ## @param gitea.podAnnotations Annotations for the Forgejo pod
              podAnnotations: {}

              ## @param gitea.ssh.logLevel Configure OpenSSH's log level. Only available for root-based Forgejo image.
              ssh:
                logLevel: 'INFO'

              config:
                # values in the DEFAULT section
                # (https://forgejo.org/docs/latest/admin/config-cheat-sheet/#overall-default)
                # are un-namespaced

                ## @param gitea.config.APP_NAME Application name, used in the page title
                APP_NAME: 'Forgejo: Beyond coding. We forge.'

                ## @param gitea.config.RUN_MODE Application run mode, affects performance and debugging: `dev` or `prod`
                RUN_MODE: prod

                ## @param gitea.config.repository General repository settings
                repository: {}

                ## @param gitea.config.cors Cross-origin resource sharing settings
                cors: {}

                ## @param gitea.config.ui User interface settings
                ui: {}

                ## @param gitea.config.markdown Markdown parser settings
                markdown: {}

                ## @param gitea.config.server [object] General server settings
                server:
                  SSH_PORT: 22 # rootful image
                  SSH_LISTEN_PORT: 2222 # rootless image

                ## @param gitea.config.database Database configuration (only necessary with an [externally managed DB](https://code.forgejo.org/forgejo-helm/forgejo-helm#external-database)).
                database:
                  DB_TYPE: postgres
                  HOST: forgejo-postgres-rw:5432
                  NAME: forgejo
                  SSL_MODE: disable

                ## @param gitea.config.indexer Settings for what content is indexed and how
                indexer: {}

                ## @param gitea.config.queue Job queue configuration
                queue:
                  TYPE: redis

                ## @param gitea.config.admin Admin user settings
                admin: {}

                ## @param gitea.config.security Site security settings
                security: {}

                ## @param gitea.config.camo Settings for the [camo](https://github.com/cactus/go-camo) media proxy server (disabled by default)
                camo: {}

                ## @param gitea.config.openid Configuration for authentication with OpenID (disabled by default)
                openid: {}

                ## @param gitea.config.oauth2_client OAuth2 client settings
                oauth2_client: {}

                ## @param gitea.config.service Configuration for miscellaneous Forgejo services
                service: {}

                ## @param gitea.config.ssh.minimum_key_sizes SSH minimum key sizes
                ssh.minimum_key_sizes: {}

                ## @param gitea.config.webhook Webhook settings
                webhook: {}

                ## @param gitea.config.mailer Mailer configuration (disabled by default)
                mailer: {}

                ## @param gitea.config.email.incoming Configuration for handling incoming mail (disabled by default)
                email.incoming: {}

                ## @param gitea.config.cache Cache configuration
                cache: {}

                ## @param gitea.config.session Session/cookie handling
                session: {}

                ## @param gitea.config.picture User avatar settings
                picture: {}

                ## @param gitea.config.project Project board defaults
                project: {}

                ## @param gitea.config.attachment Issue and PR attachment configuration
                attachment: {}

                ## @param gitea.config.log Logging configuration
                log: {}

                ## @param gitea.config.cron Cron job configuration
                cron: {}

                ## @param gitea.config.git Global settings for Git
                git: {}

                ## @param gitea.config.metrics Settings for the Prometheus endpoint (disabled by default)
                metrics: {}

                ## @param gitea.config.api Settings for the Swagger API documentation endpoints
                api: {}

                ## @param gitea.config.oauth2 Settings for the [OAuth2 provider](https://forgejo.org/docs/latest/admin/oauth2-provider/)
                oauth2: {}

                ## @param gitea.config.i18n Internationalization settings
                i18n: {}

                ## @param gitea.config.markup Configuration for advanced markup processors
                markup: {}

                ## @param gitea.config.highlight.mapping File extension to language mapping overrides for syntax highlighting
                highlight.mapping: {}

                ## @param gitea.config.time Locale settings
                time: {}

                ## @param gitea.config.migrations Settings for Git repository migrations
                migrations: {}

                ## @param gitea.config.federation Federation configuration
                federation: {}

                ## @param gitea.config.packages Package registry settings
                packages: {}

                ## @param gitea.config.mirror Configuration for repository mirroring
                mirror: {}

                ## @param gitea.config.lfs Large File Storage configuration
                lfs: {}

                ## @param gitea.config.repo-avatar Repository avatar storage configuration
                repo-avatar: {}

                ## @param gitea.config.avatar User/org avatar storage configuration
                avatar: {}

                ## @param gitea.config.storage General storage settings
                storage: {}

                ## @param gitea.config.proxy Proxy configuration (disabled by default)
                proxy: {}

                ## @param gitea.config.actions Configuration for [Forgejo Actions](https://forgejo.org/docs/latest/user/actions/)
                actions: {}

                ## @param gitea.config.other Uncategorized configuration options
                other: {}

              livenessProbe:
                enabled: true
                tcpSocket:
                  port: http
                initialDelaySeconds: 200
                timeoutSeconds: 1
                periodSeconds: 10
                successThreshold: 1
                failureThreshold: 10

              readinessProbe:
                enabled: true
                initialDelaySeconds: 5
                timeoutSeconds: 1
                periodSeconds: 10
                successThreshold: 1
                failureThreshold: 3

              startupProbe:
                enabled: false
                tcpSocket:
                  port: http
                initialDelaySeconds: 60
                timeoutSeconds: 1
                periodSeconds: 10
                successThreshold: 1
                failureThreshold: 10

            redis-cluster:
              enabled: false

            redis:
              enabled: false

            postgresql-ha:
              enabled: false

            postgresql:
              enabled: false

            checkDeprecation: true
            test:
              enabled: true
              image:
                name: busybox
                tag: latest

            extraDeploy: []

