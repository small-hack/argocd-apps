---
# webapp is deployed 2nd because we need secrets and persistent volumes up 1st
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: forgejo-web-app-set
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "3"
spec:
  goTemplate: true
  # generator allows us to source specific values from an external k8s secret
  generators:
    - plugin:
        configMapRef:
          name: secret-var-plugin-generator
        input:
          parameters:
            secret_vars:
              - global_cluster_issuer
              - forgejo_hostname
              - forgejo_toleration_key
              - forgejo_toleration_operator
              - forgejo_toleration_value
              - forgejo_toleration_effect
              - forgejo_affinity_key
              - forgejo_affinity_value
  template:
    metadata:
      name: forgejo-web-app
    spec:
      project: forgejo

      destination:
        server: https://kubernetes.default.svc
        namespace: forgejo

      syncPolicy:
        syncOptions:
          - CreateNamespace=true
          - ApplyOutOfSyncOnly=true
        automated:
          prune: true
          selfHeal: true

      source:
        repoURL: 'code.forgejo.org'
        targetRevision: 15.0.1
        chart: forgejo-helm/forgejo
        helm:
          valuesObject:
            # String to fully override common.names.namespace
            namespaceOverride: ''

            # number of replicas for the deployment
            replicaCount: 1

            strategy:
              # strategy type
              type: 'RollingUpdate'
              rollingUpdate:
                maxSurge: '100%'
                maxUnavailable: 0

            # cluster domain
            clusterDomain: cluster.local

            image:
              # image registry, e.g. gcr.io,docker.io
              registry: code.forgejo.org
              # Image to start for this pod
              repository: forgejo/forgejo
              # Visit: [Image tag](https://code.forgejo.org/forgejo/-/packages/container/forgejo/versions). Defaults to `appVersion` within Chart.yaml.
              # Overrides the image tag whose default is the chart appVersion.
              tag: ''
              #pullPolicy Image pull policy
              pullPolicy: IfNotPresent
              # Wether or not to pull the rootless version of Forgejo
              rootless: true

            ## @section Security
            # Security context is only usable with rootless image due to image design
            ## @param podSecurityContext.fsGroup Set the shared file system group for all containers in the pod.
            podSecurityContext:
              fsGroup: 1000

            ## @param containerSecurityContext Security context
            containerSecurityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                  - ALL
              # Add the SYS_CHROOT capability for root and rootless images if you intend to
              # run pods on nodes that use the container runtime cri-o. Otherwise, you will
              # get an error message from the SSH server that it is not possible to read from
              # the repository.
              # https://gitea.com/gitea/helm-chart/issues/161
                add:
                  - SYS_CHROOT
              privileged: false
              readOnlyRootFilesystem: true
              runAsGroup: 1000
              runAsNonRoot: true
              runAsUser: 1000

            ## @param podDisruptionBudget Pod disruption budget
            podDisruptionBudget: {}
            #  maxUnavailable: 1
            #  minAvailable: 1

            service:
              http:
                # Kubernetes service type for web traffic
                type: ClusterIP
                # Port number for web traffic
                port: 3000
                # ClusterIP setting for http autosetup for deployment is None
                clusterIP: None
                # LoadBalancer IP setting
                loadBalancerIP:
                # NodePort for http service
                nodePort:
                # If `service.http.type` is `NodePort` or `LoadBalancer`,
                # set this to `Local` to enable source IP preservation
                externalTrafficPolicy:
                # External IPs for service
                externalIPs:
                # HTTP service dual-stack policy
                ipFamilyPolicy:
                # HTTP service dual-stack familiy selection, for dual-stack
                # parameters see official kubernetes dual-stack concept documentation:
                # https://kubernetes.io/docs/concepts/services-networking/dual-stack/
                ipFamilies:
                # Source range filter for http loadbalancer
                loadBalancerSourceRanges: []
                # HTTP service annotations
                annotations: {}
                # HTTP service additional labels
                labels: {}
                # Loadbalancer class
                loadBalancerClass:
              ssh:
                # type Kubernetes service type for ssh traffic
                type: ClusterIP
                # port Port number for ssh traffic
                port: 22
                # clusterIP ClusterIP setting for ssh autosetup for deployment is None
                clusterIP: None
                # loadBalancerIP LoadBalancer IP setting
                loadBalancerIP:
                # nodePort NodePort for ssh service
                nodePort:
                # externalTrafficPolicy If `service.ssh.type` is `NodePort` or `LoadBalancer`, set this to `Local` to enable source IP preservation
                externalTrafficPolicy:
                # externalIPs External IPs for service
                externalIPs:
                # ipFamilyPolicy SSH service dual-stack policy
                ipFamilyPolicy:
                # ipFamilies SSH service dual-stack familiy selection,for dual-stack parameters see official kubernetes [dual-stack concept documentation](https://kubernetes.io/docs/concepts/services-networking/dual-stack/).
                ipFamilies:
                # hostPort HostPort for ssh service
                hostPort:
                # loadBalancerSourceRanges Source range filter for ssh loadbalancer
                loadBalancerSourceRanges: []
                # annotations SSH service annotations
                annotations: {}
                # labels SSH service additional labels
                labels: {}
                # loadBalancerClass Loadbalancer class
                loadBalancerClass:

            ingress:
              enabled: true
              className: nginx
              annotations:
                cert-manager.io/cluster-issuer: letsencrypt-prod
                kubernetes.io/tls-acme: "true"
              hosts:
                - host: '{{ .forgejo_hostname }}'
                  paths:
                    - path: /
                      pathType: Prefix
                      port: http
              tls:
                - secretName: forgejo-tls
                  hosts:
                   - '{{ .forgejo_hostname }}'

            ## @section Route
            route:
              # Enable route
              enabled: false
              # Route annotations
              annotations: {}
              # Host to use for the route (will be assigned automatically by OKD / OpenShift is not defined)
              host:
              # Wildcard policy if any for the route, currently only 'Subdomain' or 'None' is allowed.
              wildcardPolicy:
              # route.tls.termination termination type (see [OKD documentation](https://docs.okd.io/latest/rest_api/network_apis/route-route-openshift-io-v1.html#spec-tls))
              # route.tls.insecureEdgeTerminationPolicy the desired behavior for insecure connections to a route (e.g. with http)
              # route.tls.existingSecret the name of a predefined secret of type kubernetes.io/tls with both key (tls.crt and tls.key) set accordingly (if defined attributes 'certificate', 'caCertificate' and 'privateKey' are ignored)
              # route.tls.certificate PEM encoded single certificate
              # route.tls.privateKey PEM encoded private key
              # route.tls.caCertificate PEM encoded CA certificate or chain that issued the certificate
              # route.tls.destinationCACertificate PEM encoded CA certificate used to verify the authenticity of final end point when 'termination' is set to 'passthrough' (ignored otherwise)
              tls:
                termination: edge
                insecureEdgeTerminationPolicy: Redirect
                existingSecret:
                certificate:
                # certificate: |-
                # -----BEGIN CERTIFICATE-----
                # ...
                # -----END CERTIFICATE-----
                privateKey:
                # privateKey: |-
                # -----BEGIN PRIVATE KEY-----
                # ...
                # -----END PRIVATE KEY-----
                caCertificate:
                # caCertificate: |-
                # -----BEGIN CERTIFICATE-----
                # ...
                # -----END CERTIFICATE-----
                destinationCACertificate:
                # destinationCACertificate: |-
                # -----BEGIN CERTIFICATE-----
                # ...
                # -----END CERTIFICATE-----

            # Kubernetes resources
            resources:
              # We usually recommend not to specify default resources and to leave this as a conscious
              # choice for the user. This also increases chances charts run on environments with little
              # resources, such as Minikube. If you do want to specify resources, uncomment the following
              # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
              limits:
                cpu: 2
                memory: 2048Mi
              requests:
                cpu: 100m
                memory: 128Mi

            # NodeSelector for the deployment
            nodeSelector: {}

            tolerations:
              - key: '{{ .forgejo_toleration_key }}'
                operator: '{{ .forgejo_toleration_operator }}'
                value: '{{ .forgejo_toleration_value }}'
                effect: '{{ .forgejo_toleration_effect }}'

            affinity:
              nodeAffinity:
                requiredDuringSchedulingIgnoredDuringExecution:
                  nodeSelectorTerms:
                    - matchExpressions:
                      - key: '{{ .forgejo_affinity_key }}'
                        operator: In
                        values:
                          - '{{ .forgejo_affinity_value }}'

            # TopologySpreadConstraints for the deployment
            topologySpreadConstraints: []

            # dnsConfig for the deployment
            dnsConfig: {}

            # priorityClassName for the deployment
            priorityClassName: ''

            deployment:
              env: []

              terminationGracePeriodSeconds: 60
              labels: {}
              annotations: {}

            serviceAccount:
              create: true

            persistence:
              enabled: true
              create: false
              mount: true
              claimName: forgejo

            ## Additional volumes to mount to the Forgejo deployment
            # - name: postgres-ssl-vol
            #   secret:
            #     secretName: gitea-postgres-ssl
            extraVolumes:
              - name: postgres-ca
                secret:
                  secretName: forgejo-postgres-server-ca-key-pair
                  defaultMode: 438

              - name: postgres-client-certs
                secret:
                  secretName: forgejo-postgres-forgejo-cert
                  defaultMode: 438

              #- name: postgres-certs
              #  persistentVolumeClaim:
              #    claimName: postgres-certs

            extraContainerVolumeMounts: []

            extraInitVolumeMounts: []

            # - name: postgres-ssl-vol
            #   readOnly: true
            #   mountPath: "/pg-ssl"
            extraVolumeMounts:
              - name: postgres-ca
                mountPath: /etc/secrets/ca

              - name: postgres-client-certs
                mountPath: /etc/secrets/app

              #- name: postgres-certs
              #  mountPath: /data/git/.postgresql

            ## @section Init
            ## @param initPreScript Bash shell script copied verbatim to the start of the init-container.
            initPreScript: ""
              #echo "copy postgres certs from /etc/secrets to /data/git/.postgres..."
              #cp /etc/secrets/app/tls.crt /data/git/.postgresql/postgresql.crt
              #cp /etc/secrets/app/tls.key /data/git/.postgresql/postgresql.key
              #cp /etc/secrets/ca/ca.crt /data/git/.postgresql/root.crt

              #echo "Show files we copied:"
              #ls -hal /data/git/.postgresql/

              #echo "changing directory ownership on /data/git/.postgresql"
              # chown -R git:git /data/git/.postgresql/
              # chmod -R 0600 /data/git/.postgresql/
              #ls -hal /data/git/.postgresql/

            initContainers:
              resources:
                limits: {}
                requests:
                  cpu: 100m
                  memory: 128Mi

            signing:
              enabled: false
              gpgHome: /data/git/.gnupg
              privateKey: ''
              # privateKey: |-
              #   -----BEGIN PGP PRIVATE KEY BLOCK-----
              #   ...
              #   -----END PGP PRIVATE KEY BLOCK-----
              existingSecret: ''

            ## @section Gitea
            #
            gitea:
              admin:
                existingSecret: forgejo-admin-credentials
                email: 'gitea@local.domain'
                passwordMode: keepUpdated

              metrics:
                enabled: true
                serviceMonitor:
                  enabled: true
                  # namespace: 'monitoring'
                  #  additionalLabels:
                  #    prometheus-release: prom1

              # Either specify inline `key` and `secret` or refer to them via `existingSecret`
              ## @param gitea.oauth OAuth configuration
              oauth:
                - name: 'Zitadel'
                  provider: openidConnect
                  existingSecret: oidc-forgejo
                  autoDiscoverUrl: https://iam.vleermuis.tech/.well-known/openid-configuration
                  scopes: 'openid email profile groups'
                  groupClaimName: groups
                  adminGroup: forgejo_admins
                  restrictedGroup: forgejo_users
                  iconUrl: "https://iam.vleermuis.tech/ui/console/assets/images/zitadel-logo-solo-light.svg"

              ## @param gitea.additionalConfigSources Additional configuration from secret or configmap
              additionalConfigSources: []
              #   - secret:
              #       secretName: gitea-app-ini-oauth
              #   - configMap:
              #       name: gitea-app-ini-plaintext

              # Additional configuration sources from environment variables
              additionalConfigFromEnvs:
              - name: GITEA__CACHE__HOST
                valueFrom:
                  secretKeyRef:
                    name: forgejo-valkey-credentials
                    key: REDIS_URL

              - name: GITEA__QUEUE__CONN_STR
                valueFrom:
                  secretKeyRef:
                    name: forgejo-valkey-credentials
                    key: REDIS_URL

              - name: GITEA__DATABASE__USER
                valueFrom:
                  secretKeyRef:
                    name: forgejo-pgsql-credentials
                    key: username

              - name: GITEA__DATABASE__PASSWD
                valueFrom:
                  secretKeyRef:
                    name: forgejo-pgsql-credentials
                    key: password

              - name: GITEA__MAILER__SMTP_ADDR
                valueFrom:
                  secretKeyRef:
                    name: "forgejo-smtp-credentials"
                    key: "server"

              - name: GITEA__MAILER__PASSWD
                valueFrom:
                  secretKeyRef:
                    name: "forgejo-smtp-credentials"
                    key: "password"

              - name: GITEA__MAILER__USER
                valueFrom:
                  secretKeyRef:
                    name: "forgejo-smtp-credentials"
                    key: "login"

              # Configure OpenSSH's log level. Only available for root-based Forgejo image.
              ssh:
                logLevel: 'INFO'

              config:
                # values in the DEFAULT section
                # (https://forgejo.org/docs/latest/admin/config-cheat-sheet/#overall-default)
                # are un-namespaced

                # Application name, used in the page title
                APP_NAME: 'Forgejo: Beyond coding. We forge.'

                # Application run mode, affects performance and debugging: `dev` or `prod`
                RUN_MODE: prod

                # General repository settings
                repository: {}

                # Cross-origin resource sharing settings
                cors: {}

                # User interface settings
                ui: {}

                # Markdown parser settings
                markdown: {}

                # [object] General server settings
                server:
                  SSH_PORT: 22 # rootful image
                  SSH_LISTEN_PORT: 2222 # rootless image

                # Database configuration (only necessary with an [externally managed DB](https://code.forgejo.org/forgejo-helm/forgejo-helm#external-database)).
                database:
                  DB_TYPE: postgres
                  HOST: forgejo-postgres-rw.forgejo.svc:5432
                  NAME: forgejo
                  FROM: forgejo


                # Settings for what content is indexed and how
                indexer: {}

                # Job queue configuration
                queue:
                  TYPE: redis

                # Admin user settings
                admin: {}

                # Site security settings
                security: {}

                # Settings for the [camo](https://github.com/cactus/go-camo) media proxy server (disabled by default)
                camo: {}

                # Configuration for authentication with OpenID (disabled by default)
                openid: {}

                # OAuth2 client settings
                oauth2_client: {}

                # Configuration for miscellaneous Forgejo services
                service: {}

                # SSH minimum key sizes
                ssh.minimum_key_sizes: {}

                # Webhook settings
                webhook: {}

                # Mailer configuration (disabled by default)
                mailer:
                  ENABLED: "true"
                  SUBJECT_PREFIX: "[git.smallhack.org]"
                  PROTOCOL: "smtps"
                  FROM: noreply@smallhack.org
                  NAME: git.smallhack.org
                  SMTP_PORT: "465"

                # Configuration for handling incoming mail (disabled by default)
                email.incoming: {}

                ## @param gitea.config.cache Cache configuration
                cache:
                  ENABLED: "true"
                  ADAPTER: "redis-cluster"

                ## @param gitea.config.session Session/cookie handling
                session: {}

                # User avatar settings
                picture: {}

                # Project board defaults
                project: {}

                # Issue and PR attachment configuration
                attachment: {}

                # Logging configuration
                log:
                  LEVEL: "Debug"

                # Cron job configuration
                cron: {}

                # Global settings for Git
                git: {}

                # Settings for the Prometheus endpoint (disabled by default)
                metrics: {}

                # Settings for the Swagger API documentation endpoints
                api: {}

                # Settings for the [OAuth2 provider](https://forgejo.org/docs/latest/admin/oauth2-provider/)
                oauth2: {}

                # Internationalization settings
                i18n: {}

                # Configuration for advanced markup processors
                markup: {}

                # File extension to language mapping overrides for syntax highlighting
                highlight.mapping: {}

                # Locale settings
                time: {}

                # Settings for Git repository migrations
                migrations: {}

                # Federation configuration
                federation: {}

                # Package registry settings
                packages: {}

                # Configuration for repository mirroring
                mirror: {}

                # Large File Storage configuration
                lfs: {}

                # Repository avatar storage configuration
                repo-avatar: {}

                # User/org avatar storage configuration
                avatar: {}

                # General storage settings
                storage: {}

                # Proxy configuration (disabled by default)
                proxy: {}

                # Configuration for [Forgejo Actions](https://forgejo.org/docs/latest/user/actions/)
                actions: {}

                # Uncategorized configuration options
                other: {}

            livenessProbe:
              enabled: true
              tcpSocket:
                port: http
              initialDelaySeconds: 200
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 10

            readinessProbe:
              enabled: false
              httpGet:
                path: /api/healthz
                port: http
              initialDelaySeconds: 5
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3

            startupProbe:
              enabled: false
              tcpSocket:
                port: http
              initialDelaySeconds: 60
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 10

            redis-cluster:
              enabled: false

            redis:
              enabled: false

            postgresql-ha:
              enabled: false

            postgresql:
              enabled: false

            checkDeprecation: true
            test:
              enabled: true
              image:
                name: busybox
                tag: latest

            extraDeploy: []

