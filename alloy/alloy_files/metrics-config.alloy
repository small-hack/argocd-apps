logging {
    level  = "info"
    format = "json"
}

livedebugging {
        enabled = true
}

discovery.kubernetes "pods" {
        role = "pod"
}

prometheus.scrape "pods" {
        scrape_interval = "10s"
        targets         = discovery.kubernetes.pods.targets
        forward_to      = [prometheus.remote_write.default.receiver]
}


discovery.kubernetes "services" {
        role = "service"
}

prometheus.scrape "services" {
        scrape_interval = "10s"
        targets         = discovery.kubernetes.services.targets
        forward_to      = [prometheus.remote_write.default.receiver]
}

discovery.kubernetes "nodes" {
        role = "node"
}

prometheus.scrape "nodes" {
        scrape_interval = "10s"
        targets         = discovery.kubernetes.nodes.targets
        forward_to      = [prometheus.remote_write.default.receiver]
}

discovery.relabel "kubelet" {
        targets = discovery.kubernetes.nodes.targets

        rule {
            replacement  = "kubernetes.default.svc:443"
            target_label = "__address__"
        }

        rule {
            regex	      = "(.+)"
            source_labels = ["__meta_kubernetes_node_name"]
            replacement   = "/api/v1/nodes/$1/proxy/metrics"
            target_label  = "__metrics_path__"
        }

        rule {
            source_labels = ["__meta_kubernetes_node_address_hostname"]
            target_label  = "node"
        }
}

prometheus.scrape "kubelet" {
	job_name = "integrations/kubernetes/kubelet"
	targets  = discovery.relabel.kubelet.output
	scheme   = "https"

	tls_config {
	    sever_name		 = "kubernetes"
	    ca_file		 = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
	    insecure_skip_verify = false
	}

	bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
	forward_to	  = [prometheus.remote_write.default.targets]
}

prometheus.operator.servicemonitors "default" {
        forward_to = [prometheus.remote_write.default.receiver]
        scrape {
            default_scrape_interval = "10s"
            default_scrape_timeout  = "5s"
        }
}

prometheus.operator.podmonitors "default" {
        forward_to = [prometheus.remote_write.default.receiver]
        scrape {
            default_scrape_interval = "10s"
            default_scrape_timeout  = "5s"
        }
}

prometheus.remote_write "default" {
        endpoint {
            url = "http://mimir-nginx.monitoring.svc:80/api/v1/push"
        }
}

tracing {
  sampling_fraction = 0.1

  write_to = [otelcol.exporter.otlp.tempo.input]
}

otelcol.receiver.otlp "otlp_receiver" {
  // Listen on all available bindable addresses on port 4317 (which is the
  // default OTLP gRPC port) for the OTLP protocol.
  grpc {
    endpoint = "0.0.0.0:4317"
  }

  http {
    endpoint = "0.0.0.0:4318"

    cors {
      allowed_origins = ["*"]
      allowed_headers = ["*"]
      max_age         = 600
    }
  }

  output {
    traces = [otelcol.exporter.otlp.tempo.input]
  }
}

// OTLP exporter to Tempo
otelcol.exporter.otlp "tempo" {
  client {
    endpoint = "tempo-gateway.monitoring.svc:4317"
    tls {
      insecure = true
      insecure_skip_verify = true
    }
  }
}
