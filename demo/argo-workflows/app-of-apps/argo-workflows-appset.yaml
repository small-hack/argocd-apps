# installs whole kube-prometheus-stack which includes grafana and alert manager
---
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: argo-workflows-appset
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "3"
spec:
  goTemplate: true
  # generator allows us to source specific values from an external secret
  generators:
    - plugin:
        configMapRef:
          name: secret-var-plugin-generator
        input:
          parameters:
            secret_vars:
              - argo_cd_hostname
              - workflows_hostname
              - argo_cd_oidc_issuer
              - global_cluster_issuer
  template:
    metadata:
      name: argo-workflows-helm
    spec:
      project: argocd
      syncPolicy:
        syncOptions:
          - ApplyOutOfSyncOnly=true
        automated:
          selfHeal: true
      destination:
        server: https://kubernetes.default.svc
        namespace: argocd
      source:
        # official helm repo
        repoURL: 'https://argoproj.github.io/argo-helm/'
        chart: argo-workflows
        targetRevision: 0.42.5
        helm:
          valuesObject:
            crds:
              install: true
              keep: true
              annotations: {}

            server:
              enabled: true
              authModes: ["sso"]
              logging:
                level: info
                globallevel: "0"
                format: "text"

              ingress:
                enabled: true
                annotations:
                  cert-manager.io/cluster-issuer: '{{ .global_cluster_issuer }}'
                labels: {}
                ingressClassName: "nginx"
                hosts:
                  - '{{ .workflows_hostname }}'
                paths:
                  - /
                pathType: Prefix
                extraPaths: []
                tls:
                  - secretName: argoworkflows-example-tls
                    hosts:
                      - '{{ .workflows_hostname }}'

              sso:
                enabled: true
                issuer:  '{{ .argo_cd_oidc_issuer }}'
                clientId:
                  name: argocd-oidc-credentials
                  key: oidc.clientID
                clientSecret:
                  name: argocd-oidc-credentials
                  key: oidc.clientSecret
                redirectUrl: 'https://{{ .argo_cd_hostname: }}/oauth2/callback'
                rbac:
                  enabled: true
                  secretWhitelist: []
                scopes:
                  - openid
                  - profile
                  - email
                  # - groups
                sessionExpiry: "10h"
                insecureSkipVerify: false

            # -- Use static credentials for S3 (eg. when not using AWS IRSA)
            useStaticCredentials: true
            artifactRepository:
              archiveLogs: false
              s3:
                accessKeySecret:
                  name: "{{ .Release.Name }}-minio"
                  key: accesskey
                secretKeySecret:
                  name: "{{ .Release.Name }}-minio"
                  key: secretkey
                # insecure: false
                # caSecret:
                #   name: ca-root
                #   key: cert.pem
                # bucket:
                # endpoint:
                # region:
                # roleARN:
                # useSDKCreds: true
                # encryptionOptions:
                #   enableEncryption: true

            persistence:
              connectionPool:
                maxIdleConns: 100
                maxOpenConns: 0
              # save the entire workflow into etcd and DB
              nodeStatusOffLoad: false
              # enable archiving of old workflows
              archive: true
              postgresql:
                host: localhost
                port: 5432
                database: postgres
                tableName: argo_workflows
                # the database secrets must be in the same namespace of the controller
                userNameSecret:
                  name: argo-postgres-config
                  key: username
                passwordSecret:
                  name: argo-postgres-config
                  key: password
                ssl: true
                # sslMode must be one of: disable, require, verify-ca, verify-full
                # you can find more information about those ssl options here: https://godoc.org/github.com/lib/pq
                sslMode: require

