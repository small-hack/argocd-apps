apiVersion: v1
kind: Secret
metadata:
  name: tempo-config
  labels:
    app.kubernetes.io/name: tempo
stringData:
  tempo-query.yaml: |
    backend: 127.0.0.1:3200

  tempo.yaml: |
    cache:
      caches:
        # Redis configuration block
        # EXPERIMENTAL
        - roles:
            - frontend-search
          redis:
            # Redis endpoint to use when caching.
            endpoint: tempo-valkey-headless.monitoring.svc

            # optional.
            # Maximum time to wait before giving up on redis requests. (default 100ms)
            timeout: 500ms

            # optional.
            # How long keys stay in the redis. (default 0)
            expiration: 0

            # optional.
            # Password to use when connecting to redis. (default "")
            password: ${VALKEY_PASSWORD}

    compactor:
      compaction:
        block_retention: 48h
        compacted_block_retention: 1h
        compaction_cycle: 30s
        compaction_window: 1h
        max_block_bytes: 107374182400
        max_compaction_objects: 6000000
        max_time_per_tenant: 5m
        retention_concurrency: 10
        v2_in_buffer_bytes: 5242880
        v2_out_buffer_bytes: 20971520
        v2_prefetch_traces_count: 1000
      ring:
        kvstore:
          store: memberlist

    distributor:
      receivers: null
      ring:
        kvstore:
          store: memberlist

    ingester:
      lifecycler:
        ring:
          kvstore:
            store: memberlist
          replication_factor: 3
        tokens_file_path: /var/tempo/tokens.json

    memberlist:
      abort_if_cluster_join_fails: false
      bind_addr:
        - ${MY_POD_IP}
      bind_port: 7946
      cluster_label: 'tempo.monitoring'
      gossip_interval: 1s
      gossip_nodes: 2
      gossip_to_dead_nodes_time: 30s
      join_members:
        - dns+tempo-tempo-gossip-ring:7946
      leave_timeout: 5s
      left_ingesters_timeout: 5m
      max_join_backoff: 1m
      max_join_retries: 10
      min_join_backoff: 1s
      node_name: ""
      packet_dial_timeout: 5s
      packet_write_timeout: 5s
      pull_push_interval: 30s
      randomize_node_name: true
      rejoin_interval: 0s
      retransmit_factor: 2
      stream_timeout: 10s

    multitenancy_enabled: false

    overrides:
      defaults: {}
      per_tenant_override_config: /runtime-config/overrides.yaml

    querier:
      frontend_worker:
        frontend_address: release-name-tempo-query-frontend-discovery:9095
      max_concurrent_queries: 20
      search:
        query_timeout: 30s
      trace_by_id:
        query_timeout: 10s

    query_frontend:
      max_outstanding_per_tenant: 2000
      max_retries: 2
      metrics:
        concurrent_jobs: 1000
        duration_slo: 0s
        interval: 5m
        max_duration: 3h
        query_backend_after: 30m
        target_bytes_per_job: 104857600
        throughput_bytes_slo: 0
      search:
        concurrent_jobs: 1000
        max_spans_per_span_set: 100
        target_bytes_per_job: 104857600
      trace_by_id:
        query_shards: 50

    server:
      grpc_server_max_recv_msg_size: 4194304
      grpc_server_max_send_msg_size: 4194304
      http_listen_port: 3200
      http_server_read_timeout: 30s
      http_server_write_timeout: 30s
      log_format: logfmt
      log_level: info

    storage:
      trace:
        backend: s3
        blocklist_poll: 5m
        # S3 configuration. Will be used only if value of backend is "s3"
        # Check the S3 doc within this folder for information on s3 specific permissions.
        s3:
            # Bucket name in s3
            bucket: ${S3_BUCKET}

            # api endpoint to connect to. use AWS S3 or any S3 compatible object storage endpoint.
            endpoint: ${S3_HOSTNAME}

            # optional.
            # By default the region is inferred from the endpoint,
            # but is required for some S3-compatible storage engines.
            region: eu-central-1

            # optional.
            # access key when using static credentials.
            access_key: ${S3_USER}

            # optional.
            # secret key when using static credentials.
            secret_key: ${S3_PASSWORD}

            # optional.
            # enable to use path-style requests.
            forcepathstyle: true

            # options: 0: BucketLookupAuto, 1: BucketLookupDNS, 2: BucketLookupPath
            # Notice: ignore this option if `forcepathstyle` is set true,
            # this option allow expose minio's sdk configure.
            bucket_lookup_type: 2

        local:
          path: /var/tempo/traces
        pool:
          max_workers: 400
          queue_depth: 20000
        search:
          prefetch_trace_count: 1000
        wal:
          path: /var/tempo/wal

    usage_report:
      reporting_enabled: false
