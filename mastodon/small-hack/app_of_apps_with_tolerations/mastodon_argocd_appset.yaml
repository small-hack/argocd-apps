---
# third sync wave because it has to be up after postgres
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: mastodon-app-set
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "4"
spec:
  # enable go templating
  goTemplate: true
  # this generator allows us to values from an external k8s secret
  generators:
    - plugin:
        configMapRef:
          name: secret-var-plugin-generator
        input:
          parameters:
            secret_vars:
              - global_cluster_issuer
              - global_time_zone
              - mastodon_hostname
              - mastodon_libretranslate_hostname
              - mastodon_s3_endpoint
              - mastodon_smtp_port
              - mastodon_toleration_key
              - mastodon_toleration_operator
              - mastodon_toleration_value
              - mastodon_toleration_effect
              - mastodon_affinity_key
              - mastodon_affinity_value
  template:
    metadata:
      name: mastodon-web-app
      annotations:
        argocd.argoproj.io/sync-wave: "4"
        argocd.argoproj.io/sync-options: ApplyOnly=true
    spec:
      project: mastodon
      destination:
        server: https://kubernetes.default.svc
        namespace: mastodon
      syncPolicy:
        syncOptions:
          - ApplyOutOfSyncOnly=true
        automated:
          prune: true
          selfHeal: true
      source:
        # forked from: https://github.com/mastodon/chart/tree/main
        repoURL: 'https://small-hack.github.io/mastodon-helm-chart'
        targetRevision: 11.1.0
        chart: mastodon
        helm:
          releaseName: mastodon
          valuesObject:
            fullnameOverride: mastodon
            image:
              # https://github.com/glitch-soc/mastodon/pkgs/container/mastodon
              repository: ghcr.io/glitch-soc/mastodon
              # tag: we were previously using v4.4.4
              tag: nightly.2025-10-14

            tolerations:
              - key: '{{ .mastodon_toleration_key }}'
                operator: '{{ .mastodon_toleration_operator }}'
                value: '{{ .mastodon_toleration_value }}'
                effect: '{{ .mastodon_toleration_effect }}'

            affinity:
              nodeAffinity:
                requiredDuringSchedulingIgnoredDuringExecution:
                  nodeSelectorTerms:
                    - matchExpressions:
                      - key: '{{ .mastodon_affinity_key }}'
                        operator: In
                        values:
                          - '{{ .mastodon_affinity_value }}'

            mastodon:
              hooks:
                dbMigrate:
                  enabled: true

                # Upload website assets to S3 before deploying using rclone.
                # Whenever there is an update to Mastodon, sometimes there are assets files
                # that are renamed. As the pods are getting redeployed, and old/new pods are
                # present simultaneously, there is a chance that old asset files are
                # requested from pods that don't have them anymore, or new asset files are
                # requested from old pods. Uploading asset files to S3 in this manner solves
                # this potential conflict.
                # Note that you will need to CDN/proxy to send all requests to /assets and
                # /packs to this bucket.
                s3Upload:
                  enabled: false
                  endpoint: '{{ .mastodon_s3_endpoint }}'
                  bucket: ""
                  acl: public-read
                  secretRef:
                    name: mastodon-s3-credentials
                    keys:
                      accesKeyId: S3_USER
                      secretAccessKey: S3_PASSWORD
                  rclone:
                    # Any additional environment variables to pass to rclone.
                    env: {}

              createAdmin:
                enabled: false
                existingSecret: mastodon-admin-credentials
                secretKeys:
                  usernameKey: username
                  passwordKey: password
                  emailKey: email

              cron:
                # -- run `tootctl media remove` every week
                removeMedia:
                  enabled: true
                  schedule: "0 0 * * 0"
                updateSearchIndexMappings:
                  # -- run `tootctl search deploy --only=instances accounts tags statuses public_statuses` on a cron schedule
                  enabled: true
                  # -- run once an hour
                  schedule: "0 * * * *"

              # -- available locales: https://github.com/mastodon/mastodon/blob/main/config/application.rb#L71
              locale: en
              local_domain: '{{ .mastodon_hostname }}'

              # -- Use of WEB_DOMAIN requires careful consideration: https://docs.joinmastodon.org/admin/config/#federation
              # You must redirect the path LOCAL_DOMAIN/.well-known/ to WEB_DOMAIN/.well-known/ as described
              # Example: mastodon.example.com
              web_domain: null

              # -- If set to true, the frontpage of your Mastodon server will always redirect to the first profile in the database and registrations will be disabled.
              singleUserMode: false

              # -- Enables "Secure Mode" for more details see: https://docs.joinmastodon.org/admin/config/#authorized_fetch
              authorizedFetch: false

              # -- Enables "Limited Federation Mode" for more detauls see: https://docs.joinmastodon.org/admin/config/#limited_federation_mode
              limitedFederationMode: false

              extraVolumes:
                - name: postgres-ca
                  secret:
                    secretName: mastodon-postgres-server-ca-key-pair
                    defaultMode: 0440

                - name: postgres-client-certs
                  secret:
                    secretName: mastodon-postgres-mastodon-cert
                    defaultMode: 0440

              extraVolumeMounts:
                - name: postgres-ca
                  mountPath: /etc/secrets/ca

                - name: postgres-client-certs
                  mountPath: /etc/secrets/mastodon

              # Specify extra environment variables to be added to all Mastodon pods.
              # These can be used for configuration not included in this chart (including configuration for Mastodon varietals.)
              # ref: https://github.com/glitch-soc/mastodon/blob/main/.env.production.sample#L256
              extraEnvVars:
                # enable pre-deployment migrations
                # - name: SKIP_POST_DEPLOYMENT_MIGRATIONS
                #   value: "true"
                #
                # - name: RAILS_LOG_LEVEL
                #   value: debug

                # Maximum allowed character count
                - name: MAX_TOOT_CHARS
                  value: "2750"
                # Maximum allowed hashtags to follow in a feed column
                # Note that setting this value higher may cause significant
                # database load
                - name: MAX_FEED_HASHTAGS
                  value: "20"
                # Maximum allowed display name characters
                - name: MAX_DISPLAY_NAME_CHARS
                  value: "64"
                # Maximum number of pinned posts
                - name: MAX_PINNED_TOOTS
                  value: "8"
                # Maximum allowed bio characters
                - name: MAX_BIO_CHARS
                  value: "1000"
                # Maximum allowed poll options
                - name: MAX_POLL_OPTIONS
                  value: "15"
                # Maximum allowed poll option characters
                - name: MAX_POLL_OPTION_CHARS
                  value: "300"
                # Maximim number of profile fields allowed
                - name: MAX_PROFILE_FIELDS
                  value: "10"
                # Maximum image and video/audio upload sizes
                - name: MAX_IMAGE_SIZE
                  # 64MB for photos
                  value: "67110000"
                - name: MAX_VIDEO_SIZE
                  # 10GB for videos
                  value: "10740000000"
                # Maximum search results to display
                # Only relevant when elasticsearch is installed
                - name: MAX_SEARCH_RESULTS
                  value: "50"
                # Maximum hashtags to display
                # Customize the number of hashtags shown in 'Explore'
                - name: MAX_TRENDING_TAGS
                  value: "20"
                # enables FASP
                # https://github.com/mastodon/mastodon/pull/34031
                - name: EXPERIMENTAL_FASP
                  value: "fasp"

              s3:
                enabled: true
                existingSecret: "mastodon-s3-credentials"
                hostname: '{{ .mastodon_s3_endpoint }}'
                secretKeys:
                  s3AccessKeyID: S3_USER
                  s3AccessKey: S3_PASSWORD
                  s3Bucket: BUCKET
                  s3Endpoint: ENDPOINT
                  s3Hostname: HOSTNAME

              # HTTP cache buster configuration.
              # See the documentation for more information about this feature:
              # https://docs.joinmastodon.org/admin/config/#http-cache-buster
              cacheBuster:
                enabled: true
                httpMethod: "GET"
                # If the cache service requires authentication, specify the header name and
                # secret/token here.
                authHeader: ""
                authToken:
                  existingSecret: ""

              secrets:
                # these must be set manually; autogenerated keys are rotated on each upgrade
                existingSecret: "mastodon-server-secrets"

              sidekiq:
                workers:
                  - name: all-queues
                    # -- Number of threads / parallel sidekiq jobs that are executed per Pod
                    concurrency: 25
                    # -- Sidekiq queues for Mastodon that are handled by this worker. See https://docs.joinmastodon.org/admin/scaling/#concurrency
                    # See https://github.com/mperham/sidekiq/wiki/Advanced-Options#queues for how to weight queues as argument
                    queues:
                      - default,8
                      - push,6
                      - ingress,4
                      - mailers,2
                      - pull
                      # Make sure the scheduler queue only exists once and with a worker that has 1 replica.
                      - scheduler
                      - fasp

              smtp:
                auth_method: login
                ca_file: /etc/ssl/certs/ca-certificates.crt
                delivery_method: smtp
                domain: '{{ .mastodon_hostname }}'
                enable_starttls: 'auto'
                from_address: 'tootadmin@{{ .mastodon_hostname }}'
                openssl_verify_mode: peer
                port: '{{ .mastodon_smtp_port }}'
                reply_to: 'no-reply@{{ .mastodon_hostname }}'
                tls: true
                # keys must be named `server`, `login`, `password`
                existingSecret: mastodon-smtp-credentials

              streaming:
                image:
                  repository: ghcr.io/glitch-soc/mastodon-streaming
                port: 4000
                # -- this should be set manually since os.cpus() returns the number of CPUs on
                # the node running the pod, which is unrelated to the resources allocated to
                # the pod by k8s
                workers: 1
                # -- The base url for streaming can be set if the streaming API is deployed to
                # a different domain/subdomain.
                base_url: streaming.{{ .mastodon_hostname }}
                # -- Number of Streaming Pods running
                replicas: 1
                resources:
                  limits:
                    cpu: "1000m"
                    memory: 1Gi
                  requests:
                    cpu: 250m
                    memory: 128Mi
                # Specify extra environment variables to be added to streaming pods.
                extraEnvVars:
                  LOG_LEVEL: silly

              web:
                port: 3000
                # -- Number of Web Pods running
                replicas: 1
                minThreads: "5"
                maxThreads: "5"
                workers: "2"
                persistentTimeout: "20"

              metrics:
                statsd:
                  # -- Enable statsd publishing via STATSD_ADDR environment variable
                  address: ""

              # Sets the PREPARED_STATEMENTS environment variable: https://docs.joinmastodon.org/admin/config/#prepared_statements
              preparedStatements: true

              libretranslate:
                # -- enable the use of libretranslate for translations
                enabled: true
                endpoint: "{{ .mastodon_libretranslate_hostname }}"
                # -- use an existing secret for libretranslate endpoint and api key
                existingSecret: "libretranslate-api-key"
                secretKeys:
                  endpoint: "endpoint"
                  apiKey: "apiKey"

            ingress:
              enabled: true
              annotations:
                kubernetes.io/tls-acme: "true"
                cert-manager.io/cluster-issuer: '{{ .global_cluster_issuer }}'
                # ensure that NGINX's upload size matches Mastodon's
                nginx.ingress.kubernetes.io/proxy-body-size: 2G
              ingressClassName: nginx
              hosts:
                - host: '{{ .mastodon_hostname }}'
                  paths:
                    - path: '/'
              tls:
                - secretName: mastodon-tls
                  hosts:
                    - '{{ .mastodon_hostname }}'

              # This allows you to have a separate ingress for streaming
              # When enabled, the main ingress will no longer handle streaming requests.
              # You will also need to configure mastodon.streaming.base_url accordingly
              streaming:
                enabled: true
                annotations:
                  kubernetes.io/tls-acme: "true"
                  cert-manager.io/cluster-issuer: '{{ .global_cluster_issuer }}'
                  # ensure that NGINX's upload size matches Mastodon's
                  nginx.ingress.kubernetes.io/proxy-body-size: 2G
                ingressClassName: nginx
                hosts:
                  - host: streaming.{{ .mastodon_hostname }}
                    paths:
                      - path: "/"
                tls:
                  - secretName: mastodon-streaming-tls
                    hosts:
                      - streaming.{{ .mastodon_hostname }}


            # https://github.com/bitnami/charts/tree/main/bitnami/elasticsearch#parameters
            elasticsearch:
              # `false` will disable full-text search
              # if you enable ES after the initial install, you will need to manually run
              # RAILS_ENV=production bundle exec rake chewy:sync
              # (https://docs.joinmastodon.org/admin/optional/elasticsearch/)
              enabled: true
              fullnameOverride: mastodon-elasticsearch
              master:
                replicaCount: 1
                autoscaling:
                  minReplicas: 1
              data:
                replicaCount: 1
              coordinating:
                replicaCount: 1
              ingest:
                replicaCount: 1

            externalDatabase:
              enabled: true
              hostname: mastodon-postgres-rw.mastodon.svc
              port: "5432"
              database: mastodon
              user: mastodon
              existingSecret: "mastodon-pgsql-credentials"
              sslmode: "verify-full"
              sslcert: "/etc/secrets/mastodon/tls.crt"
              sslkey: "/etc/secrets/mastodon/tls.key"
              sslrootcert: "/etc/secrets/ca/ca.crt"

            # https://github.com/bitnami/charts/tree/main/bitnami/postgresql#parameters
            postgresql:
              enabled: false
              postgresqlHostname: mastodon-postgres-rw.mastodon.svc

            # https://github.com/bitnami/charts/tree/main/bitnami/redis#parameters
            redis:
              enabled: false
              hostname: "valkey-primary"
              port: 6379
              auth:
                # with a key of redis-password set to the password you want
                existingSecret: "mastodon-valkey-credentials"
                existingSecretPasswordKey: "valkey-password"

            service:
              type: ClusterIP
              port: 80

            externalAuth:
              oidc:
                enabled: false
              oauth_global:
                # -- Automatically redirect to OIDC, CAS or SAML, and don't use local account authentication when clicking on Sign-In
                omniauth_only: false

            # -- https://github.com/mastodon/mastodon/blob/main/Dockerfile#L75
            # if you manually change the UID/GID environment variables, ensure these values match:
            podSecurityContext:
              runAsUser: 991
              runAsGroup: 991
              fsGroup: 991

            securityContext: {}

            serviceAccount:
              # -- Specifies whether a service account should be created
              create: true
              # -- Annotations to add to the service account
              annotations: {}

            # -- timezone for all the pods
            timezone: '{{ .global_time_zone }}'
