apiVersion: v1
kind: ConfigMap
metadata:
  name: modsecurity-plugins
data:
  empty-after.conf: |
    # no data
  empty-before.conf: |
    # no data
  empty-config.conf: |
    # no data
  argocd-rule-exclusions-before.conf: |
    # -------------------------------------------------------------------------
    # allow deletions from the argocd web ui
    # TODO: can maybe prune the methods here a bit more
    # -------------------------------------------------------------------------
    SecRule REQUEST_FILENAME "@beginsWith /api/v1/applications/" \
        "id:30005,\
        phase:1,\
        ver:'argocd-rule-exclusions-plugin/1.0.0',\
        pass,\
        t:none,\
        nolog,\
        setvar:'tx.allowed_methods=GET HEAD POST PUT DELETE'"

    SecRule REQUEST_FILENAME "@beginsWith /api/v1/projects/" \
        "id:30007,\
        phase:1,\
        ver:'argocd-rule-exclusions-plugin/1.0.0',\
        pass,\
        t:none,\
        nolog,\
        setvar:'tx.allowed_methods=GET HEAD POST PUT DELETE',\
        ctl:ruleRemoveTargetById=930120;ARGS:json.project.spec.sourceRepos.array_1,\
        ctl:ruleRemoveTargetById=930120;ARGS:json.project.spec.sourceRepos.array_2,\
        ctl:ruleRemoveTargetById=930120;ARGS:json.project.spec.sourceRepos.array_3,\
        ctl:ruleRemoveTargetById=930120;ARGS:json.project.spec.sourceRepos.array_5,\
        ctl:ruleRemoveTargetById=930120;ARGS:json.project.spec.sourceRepos.array_6,\
        ctl:ruleRemoveTargetById=930120;ARGS:json.project.metadata.annotations.kubectl.kubernetes.io/last-applied-configuration"

  grafana-rule-exclusions-before.conf: |-
    # -------------------------------------------------------------------------
    # allow exceptions for rules 933210, 942100, 932110 for using datasources
    # loki and prometheus via grafana, should try to make these more granular later
    # -------------------------------------------------------------------------
    # needs tuning
    # for catching grafana QL passed as ARGS:json.queries.array_0.expr in grafana
    SecRule REQUEST_URI "@beginsWith /api/ds/query?ds_type" \
      "id:20013,\
      phase:1,\
      ver:'grafana-rule-exclusions-plugin/1.0.0',\
      pass,\
      nolog,\
      ctl:ruleRemoveTargetById=932125;ARGS:json.queries.array_0.expr,\
      ctl:ruleRemoveTargetById=942100;ARGS:json.queries.array_0.expr,\
      ctl:ruleRemoveById=933210,ctl:ruleRemoveById=942100,ctl:ruleRemoveById=932110"

    # for catching grafana QL passed as ARGS:json.queries.array_0.expr in grafana
    SecRule REQUEST_URI "@beginsWith /api/query-history" \
      "id:20030,\
      phase:1,\
      ver:'grafana-rule-exclusions-plugin/1.0.0',\
      pass,\
      nolog,\
      ctl:ruleRemoveTargetById=932125;ARGS:json.queries.array_0.expr"

    # needs tuning
    SecRule REQUEST_URI "@beginsWith /api/datasources/uid/prometheus/resources/api/v1/label" \
      "id:20017,\
      phase:1,\
      pass,\
      ver:'grafana-rule-exclusions-plugin/1.0.0',\
      nolog,\
      ctl:ruleRemoveById=932110"

    # this avoids issues when users change the default dashboard view
    SecRule REQUEST_URI "@rx /api/user/helpflags/.*$" \
      "id:20012,\
      phase:1,\
      ver:'grafana-rule-exclusions-plugin/1.0.0',\
      pass,\
      nolog,\
      setvar:'tx.allowed_methods=PUT'"

    # this is for when a user tries to hit the explore link in a prometheus alert link
    SecRule REQUEST_URI "@beginsWith /explore?orgId=" \
      "id:20029,\
      phase:1,\
      ver:'grafana-rule-exclusions-plugin/1.0.0',\
      pass,\
      nolog,\
      ctl:ruleRemoveTargetById=932125;ARGS:left"

  home-assistant-rule-exclusions-before.conf: |
    # -------------------------------------------------------------------------
    # home assistant rule exclusions
    # -------------------------------------------------------------------------
    # allow content type of text/plain, but process the body as JSON
    SecRule REQUEST_URI "@beginsWith /auth/login_flow" \
      "id:20023,\
      phase:1,\
      ver:'home-assistant-rule-exclusions-plugin/1.0.0',\
      pass,\
      nolog,\
      t:none,\
      ctl:requestBodyProcessor=JSON,\
      setvar:'tx.allowed_request_content_type=|text/plain|'"


    # Allow PUT method to login endpoint
    SecRule REQUEST_URI "@beginsWith /auth/login_flow" \
      "id:20024,\
      phase:1,\
      ver:'home-assistant-rule-exclusions-plugin/1.0.0',\
      pass,\
      nolog,\
      t:none,\
      setvar:'tx.allowed_methods=PUT POST DELETE'"


    # this is a legit endpoint for home assistant for some reason
    SecRule REQUEST_URI "@rx /frontend_latest/.*.js$" \
      "id:20025,\
      phase:1,\
      ver:'home-assistant-rule-exclusions-plugin/1.0.0',\
      pass,\
      t:none,\
      nolog,\
      ctl:ruleRemoveById=930130"

    # register sensor
    SecRule REQUEST_URI "@beginsWith /api/webhook/" \
      "id:20033,\
      phase:1,\
      ver:'home-assistant-rule-exclusions-plugin/1.0.0',\
      pass,\
      t:none,\
      nolog,\
      ctl:ruleRemoveTargetById=933150;ARGS:json.data.unique_id"

  loki-rule-exclusions-before.conf: |-
    # Allow PUT method to /loki/<org name>/ rule 911100
    # this is for when loki tries to flush chunks
    SecRule REQUEST_URI "@beginsWith /loki/fake" \
      "id:550000,\
      phase:1,\
      ver:'loki-exclusions-plugin/1.0.0',\
      pass,\
      nolog,\
      t:none,\
      setvar:'tx.allowed_methods=PUT POST GET HEAD OPTIONS'"

    # allow "Request Containing Content, but Missing Content-Type header"  rule 920340
    # rule 920340
    SecRule REQUEST_URI "@beginsWith /loki/fake" \
      "id:550001,\
      phase:1,\
      ver:'loki-exclusions-plugin/1.0.0',\
      pass,\
      nolog,\
      t:none,\
      ctl:ruleRemoveById=920340"

    # Dont treat loki writes as an http smuggeling attack
    # Rule 921110
    SecRule REQUEST_URI "@beginsWith /loki/fake" \
      "id:550002,\
      phase:1,\
      ver:'loki-exclusions-plugin/1.0.0',\
      pass,\
      nolog,\
      t:none,\
      ctl:ruleRemoveById=921110"

    # Ignore false positive:
    # Remote Command Execution: Java process spawn (CVE-2017-9805)
    # 944110
    SecRule REQUEST_URI "@beginsWith /loki/fake/" \
      "id:550003,\
      phase:1,\
      ver:'postgres-exclusions-plugin/1.0.0',\
      pass,\
      nolog,\
      t:none,\
      ctl:ruleRemoveById=944110"

  activitypub-rule-exclusions-before.conf: |-
    # Allow posting to mastodon inbox - rules 920420, 920470
    # rule 920420 :Request content type is not allowed by policy
    # also bypasses rule 920600.
    SecRule REQUEST_URI "@beginsWith /inbox" \
      "id:560000,\
      phase:1,\
      ver:'activitypub-exclusions-plugin/1.0.0',\
      pass,\
      nolog,\
      t:none,\
      setvar:'tx.allowed_request_content_type=|application/activity+json|',\
      ctl:ruleRemoveById=920600"

    SecRule REQUEST_URI "@rx ^/users/.*/inbox" \
      "id:560001,\
      phase:1,\
      ver:'activitypub-exclusions-plugin/1.0.0',\
      pass,\
      nolog,\
      t:none,\
      setvar:'tx.allowed_request_content_type=|application/activity+json|'"

    # allow editing statuses on mastodon - rule 911100
    SecRule REQUEST_URI "@beginsWith /api/v1/statuses" \
      "id:560002,\
      phase:1,\
      ver:'activitypub-exclusions-plugin/1.0.0',\
      pass,\
      nolog,\
      t:none,\
      setvar:'tx.allowed_methods=PUT POST GET HEAD OPTIONS'"

    # allow searching for statuses - rule 920470 and 920420
    # see: https://github.com/coreruleset/coreruleset/issues/3497
    SecRule REQUEST_URI "@rx ^/users/.*/statuses/.*$" \
      "id:560003,\
      phase:1,\
      ver:'activitypub-exclusions-plugin/1.0.0',\
      pass,\
      nolog,\
      t:none,\
      setvar:'tx.allowed_request_content_type=|application/activity+json|application/ld+json',\
      ctl:ruleRemoveById=920600"

    # these are both for getting statuses (like if a status is searched for)
    # avoids rule 920600
    SecRule REQUEST_URI "@rx ^/@.*/statuses/.*$" \
      "id:560004,\
      phase:1,\
      ver:'activitypub-exclusions-plugin/1.0.0',\
      pass,\
      nolog,\
      t:none,\
      ctl:ruleRemoveById=920600"

    # avoids rule 920420 :Request content type is not allowed by policy
    # this is actually for minio or seaweedfs to be able to support GoToSocial
    # S3 enabled bucket lookups for images (Uploads)
    SecRule REQUEST_URI "@rx ^/.*/.*/(attachment|emoji)/(static|small|original|)/.*$"
      "id:560005,\
      phase:1,\
      ver:'activitypub-exclusions-plugin/1.0.0',\
      pass,\
      nolog,\
      t:none,\
      setvar:'tx.allowed_request_content_type=|image/png|image/jpg|image/jpeg|image/webp|image/gif|video/mpeg|video/mp4|video/webm|image/apng|'"

    # Request content type is not allowed by policy
    # removing rule from mastodon because attachments can be almost anything
    SecRule REQUEST_URI "@rx ^.mastodon\/cache\/(preview_cards|media_attachments|accounts|custom_emojis)\/(images|files|avatars|headers).*$" \
      "id:560006,\
      phase:1,\
      ver:'activitypub-exclusions-plugin/1.0.0',\
      pass,\
      nolog,\
      t:none,\
      setvar:'tx.allowed_request_content_type=|image/png|image/jpg|image/jpeg|image/webp|image/gif|video/mpeg|video/mp4|video/webm|image/apng|application/octet-stream|application/xml|application/activity+json|'"

    # Same as above for for things not in cache
    # Request content type is not allowed by policy
    # removing rule from mastodon because attachments can be almost anything
    SecRule REQUEST_URI "@rx ^.mastodon\/(preview_cards|media_attachments|accounts|custom_emojis)\/(images|files|avatars|headers).*$" \
      "id:560007,\
      phase:1,\
      ver:'activitypub-exclusions-plugin/1.0.0',\
      pass,\
      nolog,\
      t:none,\
      setvar:'tx.allowed_request_content_type=|image/png|image/jpg|image/jpeg|image/webp|image/gif|video/mpeg|video/mp4|video/webm|image/apng|application/octet-stream|application/xml|application/activity+json|'"

    # Ignore "Illegal Accept header: charset parameter" for gotosocial profiles
    # see: https://github.com/coreruleset/coreruleset/issues/3497
    # Rule: 920600
    SecRule REQUEST_URI "@rx ^/users/.*$" \
      "id:560008,\
      phase:1,\
      ver:'activitypub-exclusions-plugin/1.0.0',\
      pass,\
      nolog,\
      t:none,\
      ctl:ruleRemoveById=920600"

    # ALlow users to upload content
    SecRule REQUEST_URI "@rx ^/users/.*$" \
      "id:560009,\
      phase:1,\
      ver:'activitypub-exclusions-plugin/1.0.0',\
      pass,\
      nolog,\
      t:none,\
      setvar:'tx.allowed_request_content_type=|image/png|image/jpg|image/jpeg|image/webp|image/gif|video/mpeg|video/mp4|video/webm|image/apng|application/octet-stream|application/xml|application/activity+json|'"

  postgres-rule-exclusions-before.conf: |-
    # Prevents blocking pgbarmand backup operations
    SecRule REQUEST_URI "@rx ^(.*-postgres\/.*-postgres\/wals\/)?" \
      "id:570000,\
      phase:1,\
      ver:'postgres-exclusions-plugin/1.0.0',\
      pass,\
      nolog,\
      t:none,\
      setvar:'tx.allowed_methods=PUT POST GET HEAD OPTIONS DELETE'"

    # allow "Request Containing Content, but Missing Content-Type header"  rule 920340
    # rule 920340
    SecRule REQUEST_URI "@rx ^(.*-postgres\/.*-postgres\/wals\/)?" \
      "id:570001,\
      phase:1,\
      ver:'postgres-exclusions-plugin/1.0.0',\
      pass,\
      nolog,\
      t:none,\
      ctl:ruleRemoveById=920340"

    # Ignore false positive:
    # Remote Command Execution: Java process spawn (CVE-2017-9805)
    # 944110
    SecRule REQUEST_URI "@rx ^(.*-postgres\/.*-postgres\/wals\/)?" \
      "id:570002,\
      phase:1,\
      ver:'postgres-exclusions-plugin/1.0.0',\
      pass,\
      nolog,\
      t:none,\
      ctl:ruleRemoveById=944110"

  tempo-rule-exclusions-before.conf: |-
    # Prevents blocking remote-writes for parquet
    SecRule REQUEST_URI "@beginsWith /tempo/single-tenant" \
      "id:580000,\
      phase:1,\
      ver:'tempo-exclusions-plugin/1.0.0',\
      pass,\
      nolog,\
      t:none,\
      setvar:'tx.allowed_methods=PUT POST GET HEAD OPTIONS DELETE'"

    # allow "Request Containing Content, but Missing Content-Type header"  rule 920340
    # rule 920340
    SecRule REQUEST_URI "@beginsWith /tempo/single-tenant" \
      "id:580001,\
      phase:1,\
      ver:'tempo-exclusions-plugin/1.0.0',\
      pass,\
      nolog,\
      t:none,\
      ctl:ruleRemoveById=920340"

    # Exception for Request content type is not allowed by policy. Rule 920420
    SecRule REQUEST_URI "@beginsWith /tempo/single-tenant" \
      "id:580002,\
      phase:1,\
      ver:'tempo-exclusions-plugin/1.0.0',\
      pass,\
      nolog,\
      t:none,\
      setvar:'tx.allowed_request_content_type=|application/octet-stream|'"

  mimir-rule-exclusions-before.conf: |-
    # Exception for Request content type is not allowed by policy. Rule 920420
    SecRule REQUEST_URI "@beginsWith /mimir-blocks/anonymous" \
      "id:680001,\
      phase:1,\
      ver:'mimir-exclusions-plugin/1.0.0',\
      pass,\
      nolog,\
      t:none,\
      setvar:'tx.allowed_request_content_type=|application/octet-stream|'"

  matrix-rule-exclusions-before.conf: |-
    # -------------------------------------------------------------------------
    # allow uploads for matrix via element web and mobile
    # to avoid rule 920420 which doesn't allow |application/octet-stream|
    # -------------------------------------------------------------------------
    # allow octet-stream content type for uploads
    # url should be like /_matrix/media/v3/upload or /_matrix/media/r0/upload
    SecRule REQUEST_URI "@rx ^/_matrix/media/(?:v3|r0)/upload.*$" \
        "id:20015,\
        phase:1,\
        ver:'matrix-rule-exclusions-plugin/1.0.0',\
        pass,\
        t:none,\
        nolog,\
        setvar:'tx.allowed_request_content_type=|application/octet-stream|image/jpeg|image/png|image/gif|'"

    # allow PUT, OPTIONS to allow uploads
    # url should be like /_matrix/media/v3/upload or /_matrix/media/r0/upload
    SecRule REQUEST_URI "@rx ^/_matrix/media/(?:v3|r0)/upload.*$" \
        "id:20016,\
        phase:1,\
        ver:'matrix-rule-exclusions-plugin/1.0.0',\
        pass,\
        t:none,\
        nolog,\
        setvar:'tx.allowed_methods=POST PUT OPTIONS'"

    # allow PUT, OPTIONS to allow sending all sorts of user/room/device data:
    # /_matrix/client/v3/user/username/account_data/im.vector.setting.breadcrumbs
    # /_matrix/client/v3/sendToDevice/m.room.encrypted
    # /_matrix/client/v3/room_keys/keys?version=1
    # /_matrix/client/v3/profile
    # /_matrix/client/v3/directory/room/
    # /_matrix/client/v3/register
    # /_matrix/client/v3/pushrules/global/room
    SecRule REQUEST_URI "@rx ^/_matrix/client/(?:v3|r0)/(?:rooms|user|devices|account|pushrules|profile|sendToDevice|room_keys|register|directory)/.*$" \
        "id:20018,\
        phase:1,\
        ver:'matrix-rule-exclusions-plugin/1.0.0',\
        pass,\
        t:none,\
        nolog,\
        setvar:'tx.allowed_methods=GET POST PUT DELETE OPTIONS'"

    # allow updating presense indicator
    SecRule REQUEST_URI "@beginsWith /_matrix/client/r0/presence/" \
        "id:20040,\
        phase:1,\
        ver:'matrix-rule-exclusions-plugin/1.0.0',\
        pass,\
        t:none,\
        nolog,\
        setvar:'tx.allowed_methods=PUT'"

    # allow creating new rooms
    SecRule REQUEST_URI "@rx ^/_matrix/client/(?:v3|r0)/createRoom$" \
        "id:20032,\
        phase:1,\
        ver:'matrix-rule-exclusions-plugin/1.0.0',\
        pass,\
        t:none,\
        nolog,\
        ctl:ruleRemoveTargetById=933150;ARGS_NAMES:json.is_direct"

    # allow prometheus alerts to be posted
    # also allows key verification with weird keys
    # /_matrix/client/r0/rooms/.*/send/m.room.message/.*
    SecRule REQUEST_URI "@rx ^/_matrix/client/(?:v3|r0)/rooms/.*/send/m.room.message/.*$" \
        "id:20027,\
        phase:1,\
        ver:'matrix-rule-exclusions-plugin/1.0.0',\
        pass,\
        t:none,\
        nolog,\
        ctl:ruleRemoveById=920420,\
        ctl:ruleRemoveTargetById=933210;ARGS:json.formatted_body,\
        ctl:ruleRemoveTargetById=930120;ARGS:json.formatted_body"

    # also allow edits to messages in encrypted rooms
    # /_matrix/client/r0/rooms/.*/send/m.room.encrypted/.*
    SecRule REQUEST_URI "@rx ^/_matrix/client/(?:v3|r0)/rooms/.*/send/m.room.encrypted/.*$" \
        "id:20034,\
        phase:1,\
        ver:'matrix-rule-exclusions-plugin/1.0.0',\
        pass,\
        t:none,\
        nolog,\
        ctl:ruleRemoveTargetById=933150;ARGS:json.ciphertext"

    # allow users to push up their keys from mobile or desktop
    # /_matrix/client/r0/pushers/set
    SecRule REQUEST_URI "@rx ^/_matrix/client/(?:r0|v3)/pushers/set$" \
        "id:20026,\
        phase:1,\
        ver:'matrix-rule-exclusions-plugin/1.0.0',\
        pass,\
        t:none,\
        nolog,\
        ctl:ruleRemoveTargetById=930120;ARGS_NAMES:json.profile_tag"

    # allows mautrix bridges to send things like:
    # "Unknown command, use the `help` command for help."
    # or
    # "This is your management room: prefixing commands with `!discord` is not required.\n"
    # which are responses from a bridge bot to a matrix user with admin access to the bot
    SecRule REQUEST_URI "@rx ^/_matrix/client/(?:v3|r0)/rooms/.*/send/m.room.message/mautrix-go_.*$"\
        "id:20019,\
        phase:1,\
        ver:'matrix-rule-exclusions-plugin/1.0.0',\
        pass,\
        t:none,\
        nolog,\
        ctl:ruleRemoveTargetById=942190;ARGS:json.body,\
        ctl:ruleRemoveTargetById=942360;ARGS:json.body,\
        ctl:ruleRemoveTargetById=932100;ARGS:json.body"

    # allow PUT, OPTIONS to allow sending room key data:
    # /_matrix/client/unstable/room_keys/keys?version=1
    SecRule REQUEST_URI "@beginsWith /_matrix/client/unstable/room_keys/keys" \
        "id:20020,\
        phase:1,\
        ver:'matrix-rule-exclusions-plugin/1.0.0',\
        pass,\
        t:none,\
        nolog,\
        setvar:'tx.allowed_methods=GET POST PUT DELETE OPTIONS',\
        ctl:ruleRemoveById=930120"

    # this is for users forwarding room keys
    # /_matrix/client/v3/room_keys/keys?version=1
    SecRule REQUEST_URI "@rx ^/_matrix/client/(?:v3|r0)/room_keys/keys.*$" \
        "id:20031,\
        phase:1,\
        ver:'matrix-rule-exclusions-plugin/1.0.0',\
        pass,\
        t:none,\
        nolog,\
        ctl:ruleRemoveById=930120"

    # allow PUT method for sending read recipets
    SecRule REQUEST_URI "@beginsWith /_matrix/federation/v1/send/" \
        "id:20021,\
        phase:1,\
        ver:'matrix-rule-exclusions-plugin/1.0.0',\
        pass,\
        t:none,\
        nolog,\
        setvar:'tx.allowed_methods=GET POST PUT OPTIONS'"

    # this is actually for a local s3 server that you have dedicated to matrix
    # can be commented out if not running local s3 server such as seaweedfs
    # /matrix/local_thumbnails/.*/32-32-image-jpeg-crop
    SecRule REQUEST_URI "@rx ^/matrix/(?:local_thumbnails|local_content)/.*$" \
        "id:20022,\
        phase:1,\
        ver:'matrix-rule-exclusions-plugin/1.0.0',\
        pass,\
        nolog,\
        t:none,\
        setvar:'tx.allowed_methods=GET HEAD POST PUT'"

    SecRule REQUEST_URI "@rx ^/matrix/local_content/.*$" \
        "id:20028,\
        phase:1,\
        ver:'matrix-rule-exclusions-plugin/1.0.0',\
        pass,\
        nolog,\
        t:none,\
        ctl:ruleRemoveById=920340"

  postgres-s3-rule-exclusions-before.conf: |-
    # -------------------------------------------------------------------------
    # allow postgresql to upload wal archives to s3
    # allow PUT, DELETE, and POST methods for base backups
    # -------------------------------------------------------------------------
    SecRule REQUEST_URI "@rx ^/(?:matrix|zitadel|nextcloud|gotosocial|mastodon|harbor)-postgres/(?:matrix|zitadel|nextcloud|gotosocial|mastodon|harbor)-postgres/(?:wals|base)/.*$" \
      "id:20000,\
      phase:1,\
      ver:'postgres-rule-exclusions-plugin/1.0.0',\
      pass,\
      nolog,\
      t:none,\
      ctl:ruleRemoveById=920340,\
      ctl:ruleRemoveById=921110,\
      ctl:ruleRemoveById=920440,\
      setvar:'tx.allowed_methods=DELETE GET POST HEAD PUT'"

  zitadel-rule-exclusions-before.conf: |
    # Enable grpc parsing for zitadle only, avoids hitting ruleID 920420"
    SecRule REQUEST_URI "@beginsWith /zitadel.auth.v1.AuthService" \
        "id:30001,\
        phase:1,\
        ver:'zitadel-rule-exclusions-plugin/1.0.0',\
        pass,\
        t:none,\
        nolog,\
        setvar:'tx.allowed_request_content_type=|application/grpc-web+proto|'"

    SecRule REQUEST_URI "@beginsWith /zitadel.admin.v1.AdminService" \
        "id:30002,\
        phase:1,\
        ver:'zitadel-rule-exclusions-plugin/1.0.0',\
        pass,\
        t:none,\
        nolog,\
        setvar:'tx.allowed_request_content_type=|application/grpc-web+proto|'"

    SecRule REQUEST_URI "@beginsWith /zitadel.management.v1.ManagementService" \
        "id:30003,\
        ver:'zitadel-rule-exclusions-plugin/1.0.0',\
        phase:1,\
        pass,\
        t:none,\
        nolog,\
        setvar:'tx.allowed_request_content_type=|application/grpc-web+proto|'"

    # zitadel sends a __Host-zitadel.useragent cookie that sometimes has a = in it
    SecRuleUpdateTargetById 941120 "!REQUEST_COOKIES:__Host-zitadel.useragent"

       ctl:ruleRemoveById=911100"
