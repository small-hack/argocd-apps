# installs mimir
---
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: mimir-appset
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "2"
spec:
  goTemplate: true
  # generator allows us to source specific values from an external secret
  generators:
    - plugin:
        configMapRef:
          name: secret-var-plugin-generator
        input:
          parameters:
            secret_vars:
              - grafana_stack_mimir_hostname
              - zitadel_hostname
              - global_cluster_issuer
  template:
    metadata:
      name: mimir

    spec:
      project: monitoring
      syncPolicy:
        syncOptions:
          - ApplyOutOfSyncOnly=true
        automated:
          selfHeal: true
          prune: true

      # where to deploy this application
      destination:
        server: https://kubernetes.default.svc
        namespace: monitoring

      # where to source this application from
      source:
        # https://github.com/grafana/mimir/tree/main/operations/helm/charts/mimir-distributed
        repoURL: https://grafana.github.io/helm-charts
        chart: mimir-distributed
        targetRevision: 5.8.0-rc.0
        helm:
          releaseName: mimir
          valuesObject:
            fullnameOverride: mimir
            # -- Additional structured values on top of the text based 'mimir.config'. Applied after the text based config is evaluated for templates. Enables adding and modifying YAML elements in the evaulated 'mimir.config'.
            #
            # Additionally, consider the optional "insecure_skip_verify" key below, it allows you to skip_verify_false in case the s3_endpoint certificate is not trusted.
            # For more information see https://grafana.com/docs/mimir/latest/references/configuration-parameters/
            structuredConfig:
              common:
                storage:
                  backend: s3
                  s3:
                    bucket_name: "${BUCKET_NAME}"
                    endpoint: "${BUCKET_HOST}:${BUCKET_PORT}"
                    access_key_id: "${AWS_ACCESS_KEY_ID}" # This is a secret injected via an environment variable
                    secret_access_key: "${AWS_SECRET_ACCESS_KEY}" # This is a secret injected via an environment variable
                    http:
                      insecure_skip_verify: true

            ingester:
              # -- Total number of replicas for the ingester across all availability zones
              # If ingester.zoneAwareReplication.enabled=false, this number is taken as is.
              # Otherwise each zone starts `ceil(replicas / number_of_zones)` number of pods.
              #   E.g. if 'replicas' is set to 4 and there are 3 zones, then 4/3=1.33 and after rounding up it means 2 pods per zone are started.
              replicas: 3
              zoneAwareReplication:
                # -- Enable zone-aware replication for ingester
                enabled: false

            # we don't need minio because we provide s3 via seaweedfs
            minio:
              enabled: false
