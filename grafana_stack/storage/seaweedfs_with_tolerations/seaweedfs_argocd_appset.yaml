---
# webapp is deployed 3rd because we need secrets and persistent volumes up first
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: grafana-stack-seaweedfs-appset
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "2"
spec:
  goTemplate: true
  # generator allows us to source specific values from an external k8s secret
  generators:
    - plugin:
        configMapRef:
          name: secret-var-plugin-generator
        input:
          parameters:
            secret_vars:
              - global_cluster_issuer
              - grafana_stack_s3_region
              - grafana_stack_s3_endpoint
              - grafana_stack_toleration_key
              - grafana_stack_toleration_operator
              - grafana_stack_toleration_value
              - grafana_stack_toleration_effect
              - grafana_stack_affinity_key
              - grafana_stack_affinity_value
  template:
    metadata:
      name: grafana_stack-seaweedfs-app
      annotations:
        argocd.argoproj.io/sync-wave: "2"
    spec:
      project: grafana_stack
      destination:
        server: https://kubernetes.default.svc
        namespace: monitoring
      syncPolicy:
        syncOptions:
          - ApplyOutOfSyncOnly=true
        automated:
          prune: true
          selfHeal: true
      source:
        repoURL: 'https://seaweedfs.github.io/seaweedfs/helm'
        targetRevision: 3.68.0
        chart: seaweedfs
        helm:
          releaseName: grafana-stack-seaweedfs
          valuesObject:
            global:
              createClusterRole: true
              imageName: chrislusf/seaweedfs
              imagePullPolicy: IfNotPresent
              enableSecurity: false
              securityConfig:
                jwtSigning:
                  volumeWrite: true
                  volumeRead: false
                  filerWrite: false
                  filerRead: false
              serviceAccountName: "grafana-stack-seaweedfs"
              certificates:
                alphacrds: false
              monitoring:
                enabled: false
                gatewayHost: null
                gatewayPort: null
              enableReplication: false
              replicationPlacment: "001"
              extraEnvironmentVars:
                WEED_CLUSTER_DEFAULT: "sw"
                WEED_CLUSTER_SW_MASTER: "seaweedfs-master.seaweedfs:9333"
                WEED_CLUSTER_SW_FILER: "seaweedfs-filer-client.seaweedfs:8888"
            image:
              registry: ""
              repository: ""
            master:
              enabled: true
              replicas: 1
              port: 9333
              grpcPort: 19333
              metricsPort: 9327
              ipBind: "0.0.0.0"
              loggingOverrideLevel: null
              pulseSeconds: null
              garbageThreshold: null
              metricsIntervalSec: 15
              defaultReplication: "000"
              disableHttp: false
              config: |-
                # Enter any extra configuration for master.toml here.
                # It may be be a multi-line string.
              data:
                type: "emptyDir"
                # claimName: "swfs-master-data"
              logs:
                type: "hostPath"
                size: ""
                storageClass: ""
                hostPathPrefix: /storage
              livenessProbe:
                enabled: true
                httpGet:
                  path: /cluster/status
                  scheme: HTTP
                initialDelaySeconds: 10
                periodSeconds: 2
                successThreshold: 1
                failureThreshold: 100
                timeoutSeconds: 10
              readinessProbe:
                enabled: true
                httpGet:
                  path: /cluster/status
                  scheme: HTTP
                initialDelaySeconds: 10
                periodSeconds: 2
                successThreshold: 2
                failureThreshold: 100
                timeoutSeconds: 10

              tolerations: |
                - key: '{{ .grafana_stack_toleration_key }}'
                  operator: '{{ .grafana_stack_toleration_operator }}'
                  value: '{{ .grafana_stack_toleration_value }}'
                  effect: '{{ .grafana_stack_toleration_effect }}'

              affinity: |
                nodeAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                    nodeSelectorTerms:
                      - matchExpressions:
                        - key: '{{ .grafana_stack_affinity_key }}'
                          operator: In
                          values:
                            - '{{ .grafana_stack_affinity_value }}'

            volume:
              enabled: true
              port: 8080
              grpcPort: 18080
              metricsPort: 9327
              ipBind: "0.0.0.0"
              replicas: 1
              loggingOverrideLevel: null
              fileSizeLimitMB: null
              minFreeSpacePercent: 7
              dataDirs:
                - name: data
                  type: "existingClaim"
                  claimName: "swfs-volume-data"
                  maxVolumes: 0

              livenessProbe:
                enabled: true
                httpGet:
                  path: /status
                  scheme: HTTP
                initialDelaySeconds: 10
                periodSeconds: 2
                successThreshold: 1
                failureThreshold: 100
                timeoutSeconds: 10

              readinessProbe:
                enabled: true
                httpGet:
                  path: /status
                  scheme: HTTP
                initialDelaySeconds: 10
                periodSeconds: 2
                successThreshold: 2
                failureThreshold: 100
                timeoutSeconds: 10

              podSecurityContext:
                enabled: false

              tolerations: |
                - key: '{{ .grafana_stack_toleration_key }}'
                  operator: '{{ .grafana_stack_toleration_operator }}'
                  value: '{{ .grafana_stack_toleration_value }}'
                  effect: '{{ .grafana_stack_toleration_effect }}'

              affinity: |
                nodeAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                    nodeSelectorTerms:
                      - matchExpressions:
                        - key: '{{ .grafana_stack_affinity_key }}'
                          operator: In
                          values:
                            - '{{ .grafana_stack_affinity_value }}'

            filer:
              enabled: true
              replicas: 1
              port: 8888
              grpcPort: 18888
              metricsPort: 9327
              encryptVolumeData: true
              enablePVC: true
              storage: 10Gi
              data:
                type: "existingClaim"
                claimName: "swfs-filer-data"

              s3:
                enabled: true
                port: 8333
                httpsPort: 0
                allowEmptyFolder: false
                domainName: '{{ .grafana_stack_s3_endpoint }}'
                enableAuth: true
                existingConfigSecret: seaweedfs-s3-secret
                createBuckets:
                  - name: loki
                    anonymousRead: false
                  - name: mimir
                    anonymousRead: false

              livenessProbe:
                enabled: true
                httpGet:
                  path: /
                  scheme: HTTP
                initialDelaySeconds: 10
                periodSeconds: 2
                successThreshold: 1
                failureThreshold: 100
                timeoutSeconds: 10

              readinessProbe:
                enabled: true
                httpGet:
                  path: /
                  scheme: HTTP
                initialDelaySeconds: 10
                periodSeconds: 2
                successThreshold: 2
                failureThreshold: 100
                timeoutSeconds: 10

              tolerations: |
                - key: '{{ .grafana_stack_toleration_key }}'
                  operator: '{{ .grafana_stack_toleration_operator }}'
                  value: '{{ .grafana_stack_toleration_value }}'
                  effect: '{{ .grafana_stack_toleration_effect }}'

              affinity: |
                nodeAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                    nodeSelectorTerms:
                      - matchExpressions:
                        - key: '{{ .grafana_stack_affinity_key }}'
                          operator: In
                          values:
                            - '{{ .grafana_stack_affinity_value }}'
            s3:
              enabled: false
              ingress:
                enabled: true
                className: "nginx"
                # host: false for "*" hostname
                host: '{{ .grafana_stack_s3_endpoint }}'
                # additional ingress annotations for the s3 endpoint
                annotations:
                  nginx.ingress.kubernetes.io/proxy-body-size: 1G
                  cert-manager.io/cluster-issuer: '{{ .global_cluster_issuer }}'
                tls:
                  - secretName: grafana_stack-seaweedfs-tls
                    hosts:
                      - '{{ .grafana_stack_s3_endpoint }}'
            cosi:
              enabled: false
