---
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: mimir-config
spec:
  target:
    # Name for the secret to be created on the cluster
    name: mimir-config
    deletionPolicy: Delete
    template:
      engineVersion: v2
      data:
        mimir.yaml: |
          common:
            storage:
              # Backend storage to use. Supported backends are: s3, gcs, azure, swift, filesystem.
              backend: s3
              s3:
                # The S3 bucket endpoint.
                endpoint: {{ `{{ .s3_endpoint }}` }}

                # S3 access key ID
                access_key_id: {{ `{{ .secret_access_key_id }}` }}

                # S3 secret access key
                secret_access_key: {{ `{{ .secret_access_key }}` }}

                # If enabled, use http:// for the S3 endpoint instead of https://
                insecure: false

                http:
                  # If the client connects to object storage via HTTPS and this option is enabled,
                  # the client accepts any certificate and hostname.
                  insecure_skip_verify: true

          activity_tracker:
            # File where ongoing activities are stored.
            filepath: /active-query-tracker/activity.log

          alertmanager:
            # Directory to store Alertmanager state and temporarily configuration files
            data_dir: /data

            # How long should we store stateful data (notification logs and silences)
            retention: 120h

            # Enable the alertmanager config API.
            enable_api: true

            # The URL under which Alertmanager is externally reachable
            external_url: /alertmanager

            # Filename of fallback config to use if none specified for instance.
            fallback_config_file: /configs/alertmanager_fallback_config.yaml

            # Enable routes to support the migration and operation of the Grafana Alertmanager.
            grafana_alertmanager_compatibility_enabled: false

          alertmanager_storage:
            # Backend storage to use. Supported backends are: s3, gcs, azure, swift, filesystem, local.
            backend: s3

            s3:
              bucket_name: mimir-alertmanager

          blocks_storage:
            # Backend storage to use. Supported backends are: s3, gcs, azure, swift, filesystem
            backend: s3

            s3:
              bucket_name: mimir-blocks

            # This configures how the querier and store-gateway discover and synchronize blocks stored in the bucket
            bucket_store:
              # Directory to store synchronized TSDB index headers.
              sync_dir: /data/tsdb-sync

            tsdb:
              # Directory to store TSDBs (including WAL) in the ingesters.
              dir: /data/tsdb

              # How frequently the ingester checks whether the TSDB head should be compacted
              # and, if so, triggers the compaction.
              head_compaction_interval: 1m

              # True to enable TSDB WAL compression.
              wal_compression_enabled: false

              # Maximum number of CPUs that can simultaneously processes WAL replay.
              wal_replay_concurrency: 3

          compactor:
            # List of compaction time ranges.
            block_ranges: [2h0m0s,12h0m0s,24h0m0s]

            # The frequency at which the compaction runs
            compaction_interval: 30m

            # Directory to temporarily store blocks during compaction.
            data_dir: /data

            # Time before a block marked for deletion is deleted from bucket.
            deletion_delay: 2h

            # How long the compactor waits before compacting first-level blocks that are uploaded by the ingesters
            first_level_compaction_wait_period: 25m

            # Max number of blocks that can be closed concurrently during split compaction.
            max_closing_blocks_concurrency: 2

            # Number of goroutines opening blocks before compaction.
            max_opening_blocks_concurrency: 4

            # Number of symbols flushers used when doing split compaction.
            symbols_flushers_concurrency: 4

            sharding_ring:
              # Period at which to heartbeat to the ring.
              heartbeat_period: 15s

              # The heartbeat timeout after which compactors are considered unhealthy within the ring.
              heartbeat_timeout: 1m

              # Minimum time to wait for ring stability at startup.
              wait_stability_min_duration: 1m


          distributor:
            pool:
              # How frequently to clean up clients for ingesters that have gone away.
              client_cleanup_period: 15s

            # Max message size in bytes to accept for incoming push requests to the remote write API.
            max_recv_msg_size: 104857600

            # Timeout for downstream ingesters.
            remote_timeout: 2s

            ring:
              # Period at which to heartbeat to the ring
              heartbeat_period: 15s

              # The heartbeat timeout after which distributors are considered unhealthy within the ring.
              heartbeat_timeout: 1m

          frontend:
            # True to enable query sharding.
            parallelize_shardable_queries: true

            # Address of the query-scheduler component,
            scheduler_address: mimir-query-scheduler-headless.monitoring.svc:9095

          frontend_worker:
            # Configures the gRPC client used to communicate between the querier and the query-frontend.
            grpc_client_config:
              max_send_msg_size: 419430400

            # Address of the query-scheduler component, in host:port format.
            scheduler_address: mimir-query-scheduler-headless.monitoring.svc:9095

          ingester:
            ring:
              # The replication factor to use when sharding the alertmanager.
              replication_factor: 1

              # Duration to sleep for before exiting, to ensure metrics are scraped
              final_sleep: 0s

              # Period at which to heartbeat to the ring.
              heartbeat_period: 15s

              # The heartbeat timeout after which ingesters are skipped for reads/writes
              heartbeat_timeout: 1m

              # Number of tokens for each ingester.
              num_tokens: 128

              # File path where tokens are stored. If empty, tokens are not stored at shutdown and restored at startup.
              # Must be empty if token-generation-strategy is set to "spread-minimizing".
              tokens_file_path: ""

              # Unregister from the ring upon clean shutdown.
              unregister_on_shutdown: true

              # Specifies the strategy used for generating tokens for ingesters.
              # Supported values are: random,spread-minimizing.
              token_generation_strategy: spread-minimizing

              # (advanced) Comma-separated list of zones in which spread minimizing strategy
              # is used for token generation. This value must include all zones in which
              # ingesters are deployed, and must not change over time. This configuration is
              # used only when "token-generation-strategy" is set to "spread-minimizing".
              # CLI flag: -ingester.ring.spread-minimizing-zones
              spread_minimizing_zones: "zone-default"

          ingester_client:
            grpc_client_config:
              max_recv_msg_size: 104857600
              max_send_msg_size: 104857600

          limits:
            # Per-tenant push request rate limit in requests per second. 0 to disable.
            request_rate: 0

            # Per-tenant ingestion rate limit in samples per second.
            ingestion_rate: 25000000

            # Per-tenant allowed ingestion burst size (in number of samples).
            ingestion_burst_size: 50000000

            # The maximum number of in-memory series per tenant, across the cluster
            # before replication. 0 to disable
            max_global_series_per_user: 0

            # Most recent allowed cacheable result per-tenant
            max_cache_freshness: 10m

            max_query_parallelism: 240

            # Limit the total query time range (end - start time).
            max_total_query_length: 12000h

            # Per-tenant Alertmanager client configuration. If not supplied, the tenant's
            # notifications are sent to the ruler-wide default.
            ruler_alertmanager_client_config:

              # Comma-separated list of URL(s) of the Alertmanager(s) to send notifications to
              alertmanager_url: "mimir-alertmanager.monitoring.svc:9095"

              # Enable TLS for gRPC client connecting to alertmanager.
              tls_enabled: false

              # Skip validating server certificate.
              tls_insecure_skip_verify: true

              # Override the default minimum TLS version.
              tls_min_version: ""

              # HTTP Basic authentication username.
              basic_auth_username: {{ `{{ .secret_access_key_id }}` }}

              # HTTP Basic authentication password.
              basic_auth_password: "{{ `{{ .secret_access_key }}` }}"

              oauth2:
                # OAuth2 client ID. Enables the use of OAuth2 for authenticating
                client_id: ""

                # OAuth2 client secret.
                client_secret: ""

                # Endpoint used to fetch access token.
                token_url: ""

                # Optional scopes to include with the token request.
                scopes: ""

          memberlist:
            # How soon can dead node's name be reclaimed with new address.
            dead_node_reclaim_time: 30s

            # Abort if this node fails to join memberlist cluster at startup.
            abort_if_cluster_join_fails: false

            # (advanced) Enable message compression.
            compression_enabled: false

            # Other cluster members to join. Can be specified multiple times. It can be an
            # IP, hostname or an entry specified in the DNS Service Discovery format.
            join_members:
            - dns+mimir-gossip-ring.monitoring.svc.cluster.local.:7946

            # (advanced) If not 0, how often to rejoin the cluster.
            rejoin_interval: 15m

            # How long to keep obsolete entries in the KV store.
            leave_timeout: 20s

          querier:
            # The number of workers running in each querier process.
            max_concurrent: 20

            # Maximum number of remote read queries that can be executed concurrently
            # max_concurrent_remote_read_queries: 2

            # The timeout for a query.
            timeout: 2m

            # Maximum number of samples a single query can load into memory.
            max_samples: 50000000


          query_scheduler:
            max_outstanding_requests_per_tenant: 800

          ruler:
            # Enable the ruler config API.
            enable_api: true

            # Directory to store temporary rule files loaded by the Prometheus rule managers.
            rule_path: /data

          ruler_storage:
            # Backend storage to use. Supported backends are: s3, gcs, azure, swift, filesystem, local.
            backend: s3
            s3:
              bucket_name: mimir-ruler

          runtime_config:
            file: /var/mimir/runtime.yaml

          store_gateway:
            # The hash ring configuration.
            sharding_ring:
              # The replication factor to use when sharding the alertmanager.
              replication_factor: 1

              # Period at which to heartbeat to the ring.
              heartbeat_period: 15s

              # The heartbeat timeout after which store gateways are considered unhealthy within the ring
              heartbeat_timeout: 1m

              # When enabled, a store-gateway is automatically removed from the ring
              # after failing to heartbeat the ring
              auto_forget_enabled: true

              # (advanced) Number of consecutive timeout periods an unhealthy instance in
              # the ring is automatically removed after.
              # auto_forget_unhealthy_periods: 10

              # File path where tokens are stored.
              tokens_file_path: /data/tokens

              # Unregister from the ring upon clean shutdown.
              unregister_on_shutdown: true

              # Minimum time to wait for ring stability at startup, if set to positive value.
              wait_stability_min_duration: 1m

          usage_stats:
            installation_mode: helm

  data:
    # S3 Endpoint
    - secretKey: s3_endpoint
      sourceRef:
        storeRef:
          name: bitwarden-fields
          kind: ClusterSecretStore
      remoteRef:
        key: {{ .Values.s3MimirCredentialsBitwardenID }}
        property: endpoint

    # Alertmanager Bucket
    #- secretKey: alertmanager_bucket
    #  sourceRef:
    #    storeRef:
    #      name: bitwarden-fields
    #      kind: ClusterSecretStore
    #  remoteRef:
    #    key: {{ .Values.s3MimirCredentialsBitwardenID }}
    #    property: alertmanager_bucket

    # Secret Access Key ID
    - secretKey: secret_access_key_id
      sourceRef:
        storeRef:
          name: bitwarden-login
          kind: ClusterSecretStore
      remoteRef:
        key: {{ .Values.s3MimirCredentialsBitwardenID }}
        property: username

    # Secret Access Key
    - secretKey: secret_access_key
      sourceRef:
        storeRef:
          name: bitwarden-login
          kind: ClusterSecretStore
      remoteRef:
        key: {{ .Values.s3MimirCredentialsBitwardenID  }}
        property: password

    # Ruler Bucket
    #- secretKey: ruler_bucket
    #  sourceRef:
    #    storeRef:
    #      name: bitwarden-fields
    #      kind: ClusterSecretStore
    #  remoteRef:
    #    key: {{ .Values.s3MimirCredentialsBitwardenID }}
    #    property: ruler_bucket

    # Blocks Bucket
    #- secretKey: blocks_bucket
    #  sourceRef:
    #    storeRef:
    #      name: bitwarden-fields
    #      kind: ClusterSecretStore
    #  remoteRef:
    #    key: {{ .Values.s3MimirCredentialsBitwardenID }}
    #    property: blocks_bucket
