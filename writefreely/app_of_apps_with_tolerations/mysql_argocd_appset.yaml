---
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: writefreely-mysql-app-set
  namespace: argocd
spec:
  goTemplate: true
  # generator allows us to source specific values from an external k8s secret
  generators:
    - plugin:
        configMapRef:
          name: secret-var-plugin-generator
        input:
          parameters:
            secret_vars:
              - global_cluster_issuer
              - writefreely_hostname
              - writefreely_s3_endpoint
              - writefreely_toleration_key
              - writefreely_toleration_operator
              - writefreely_toleration_value
              - writefreely_toleration_effect
              - writefreely_affinity_key
              - writefreely_affinity_value

  template:
    metadata:
      name: writefreely-mysql
      annotations:
        # needs to be up before writefreely but after the external secrets
        argocd.argoproj.io/sync-wave: "2"
    spec:
      project: writefreely
      destination:
        server: https://kubernetes.default.svc
        namespace: writefreely

      # reconcilation policy for this Argo CD Application
      syncPolicy:
        syncOptions:
          - ApplyOutOfSyncOnly=true
        automated:
          prune: true
          selfHeal: true

      source:
        repoURL: registry-1.docker.io
        chart: bitnamicharts/mysql
        targetRevision: 13.0.1
        helm:
          releaseName: "mysql"
          # ref: https://github.com/bitnami/charts/blob/main/bitnami/mysql/values.yaml
          valuesObject:

            fullnameOverride: "mysql"

            ## @param mysql.architecture MySQL architecture. Allowed values: `standalone` or `replication`
            architecture: standalone

            ## MySQL Authentication parameters
            ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#setting-the-root-password-on-first-run
            ##      https://github.com/bitnami/containers/tree/main/bitnami/mysql/#creating-a-database-on-first-run
            ##      https://github.com/bitnami/containers/tree/main/bitnami/mysql/#creating-a-database-user-on-first-run
            auth:
              database: writefreely
              username: writefreely
              ## @param mysql.auth.existingSecret Existing secret with MySQL credentials
              ## @param auth.existingSecret Use existing secret for password details. The secret has to contain the keys `mysql-root-password`, `mysql-replication-password` and `mysql-password`
              existingSecret: "writefreely-mysql-credentials"

            ## MySQL Primary configuration
            primary:
              ## MySQL Primary Persistence parameters
              persistence:
                enabled: true
                ## @param primary.persistence.existingClaim Name of an existing `PersistentVolumeClaim` for MySQL primary replicas
                ## NOTE: When it's set the rest of persistence parameters are ignored
                existingClaim: "writefreely-mysql"

              ## MySQL primary container's resource requests and limits
              ## @param mysql.primary.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, small, medium, large, xlarge, 2xlarge). This is ignored if primary.resources is set (primary.resources is recommended for production).
              ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
              resourcesPreset: "medium"

              ## @param mysql.primary.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
              ## Example:
              ## resources:
              ##   requests:
              ##     cpu: 2
              ##     memory: 512Mi
              ##   limits:
              ##     cpu: 3
              ##     memory: 1024Mi
              resources: {}

              tolerations:
                - key: '{{ .writefreely_toleration_key }}'
                  operator: '{{ .writefreely_toleration_operator }}'
                  value: '{{ .writefreely_toleration_value }}'
                  effect: '{{ .writefreely_toleration_effect }}'

              affinity:
                nodeAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                    nodeSelectorTerms:
                      - matchExpressions:
                        - key: '{{ .writefreely_affinity_key }}'
                          operator: In
                          values:
                            - '{{ .writefreely_affinity_value }}'
